<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reset Password</title>
    <!-- SweetAlert2 CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.min.css">
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #3b5d50;
            --primary-light: rgba(59, 93, 80, 0.1);
            --primary-dark: #2d4a3e;
            --white-color: #ffffff;
            --light-color: #f8f9fa;
            --gray-color: #e9ecef;
            --text-color: #212529;
            --error-color: #dc3545;
            --success-color: #28a745;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--text-color);
            line-height: 1.6;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background-image: 
                linear-gradient(135deg, rgba(59, 93, 80, 0.05) 25%, transparent 25%),
                linear-gradient(225deg, rgba(59, 93, 80, 0.05) 25%, transparent 25%),
                linear-gradient(45deg, rgba(59, 93, 80, 0.05) 25%, transparent 25%),
                linear-gradient(315deg, rgba(59, 93, 80, 0.05) 25%, var(--light-color) 25%);
            background-position: 40px 0, 40px 0, 0 0, 0 0;
            background-size: 80px 80px;
            background-repeat: repeat;
        }
        
        .container {
            width: 100%;
            max-width: 450px;
            padding: 0 20px;
            animation: fadeIn 0.5s ease-out;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .card {
            background-color: var(--white-color);
            border-radius: 16px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            transform: translateZ(0);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 50px rgba(0, 0, 0, 0.15);
        }
        
        .card-header {
            background-color: var(--primary-color);
            color: var(--white-color);
            padding: 30px;
            text-align: center;
            position: relative;
            overflow: hidden;
        }
        
        .card-header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 70%);
            transform: rotate(30deg);
        }
        
        .card-header h1 {
            font-size: 28px;
            font-weight: 600;
            margin: 0;
            position: relative;
            text-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .card-body {
            padding: 35px;
        }
        
        .form-group {
            margin-bottom: 25px;
            position: relative;
        }
        
        label {
            display: block;
            margin-bottom: 10px;
            font-weight: 500;
            color: var(--primary-color);
            transition: color 0.3s;
        }
        
        .form-control {
            width: 100%;
            padding: 14px 16px;
            border: 2px solid var(--gray-color);
            border-radius: 8px;
            font-size: 16px;
            transition: all 0.3s;
            background-color: var(--white-color);
        }
        
        .form-control:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 4px var(--primary-light);
        }
        
        .form-control.error {
            border-color: var(--error-color);
        }
        
        .form-control.valid {
            border-color: var(--success-color);
        }
        
        .password-strength {
            height: 5px;
            margin-top: 8px;
            border-radius: 3px;
            background-color: var(--gray-color);
            overflow: hidden;
            position: relative;
        }
        
        .password-strength-meter {
            height: 100%;
            width: 0;
            transition: width 0.3s ease, background-color 0.3s ease;
        }
        
        .password-feedback {
            font-size: 12px;
            margin-top: 5px;
            color: var(--text-color);
            transition: color 0.3s;
        }
        
        .error-message {
            color: var(--error-color);
            font-size: 13px;
            margin-top: 5px;
            display: none;
            animation: shake 0.5s ease-in-out;
        }
        
        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            20%, 60% { transform: translateX(-5px); }
            40%, 80% { transform: translateX(5px); }
        }
        
        .btn {
            display: block;
            width: 100%;
            padding: 16px;
            background-color: var(--primary-color);
            color: var(--white-color);
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s;
            position: relative;
            overflow: hidden;
            z-index: 1;
        }
        
        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.7s;
            z-index: -1;
        }
        
        .btn:hover {
            background-color: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(59, 93, 80, 0.3);
        }
        
        .btn:hover::before {
            left: 100%;
        }
        
        .btn:active {
            transform: translateY(0);
        }
        
        .back-link {
            display: block;
            text-align: center;
            margin-top: 25px;
            color: var(--primary-color);
            text-decoration: none;
            font-weight: 500;
            transition: color 0.3s;
        }
        
        .back-link:hover {
            color: var(--primary-dark);
            text-decoration: underline;
        }
        
        .password-toggle {
            position: absolute;
            right: 15px;
            top: 47px;
            cursor: pointer;
            color: #6c757d;
            transition: color 0.3s;
        }
        
        .password-toggle:hover {
            color: var(--primary-color);
        }
        
        .password-requirements {
            margin-top: 15px;
            padding: 15px;
            background-color: var(--light-color);
            border-radius: 8px;
            font-size: 14px;
        }
        
        .requirement {
            margin-bottom: 5px;
            display: flex;
            align-items: center;
            color: #6c757d;
            transition: color 0.3s;
        }
        
        .requirement.met {
            color: var(--success-color);
        }
        
        .requirement-icon {
            margin-right: 8px;
            display: inline-block;
            width: 16px;
            height: 16px;
            border-radius: 50%;
            border: 1px solid currentColor;
            position: relative;
        }
        
        .requirement.met .requirement-icon::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 8px;
            height: 8px;
            background-color: currentColor;
            border-radius: 50%;
            transform: translate(-50%, -50%);
        }
        
        .logo {
            margin-bottom: 20px;
        }
        
        .logo svg {
            width: 60px;
            height: 60px;
            fill: var(--white-color);
            filter: drop-shadow(0 2px 4px rgba(0,0,0,0.2));
            transition: transform 0.3s;
        }
        
        .logo svg:hover {
            transform: scale(1.1);
        }
        
        /* Responsive adjustments */
        @media (max-width: 480px) {
            .card-header {
                padding: 25px;
            }
            
            .card-body {
                padding: 25px;
            }
            
            .card-header h1 {
                font-size: 24px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="card">
            <div class="card-header">
                <div class="logo">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                        <path d="M17.66 9.53l-7.07 7.07-4.24-4.24 1.41-1.41 2.83 2.83 5.66-5.66 1.41 1.41zM4 12c0-2.33 1.02-4.42 2.62-5.88L9 8.5v-6H3l2.2 2.2C3.24 6.52 2 9.11 2 12c0 5.19 3.95 9.45 9 9.95v-2.02c-3.94-.49-7-3.86-7-7.93zm18 0c0-5.19-3.95-9.45-9-9.95v2.02c3.94.49 7 3.86 7 7.93 0 2.33-1.02 4.42-2.62 5.88L15 15.5v6h6l-2.2-2.2c1.96-1.82 3.2-4.41 3.2-7.3z"/>
                    </svg>
                </div>
                <h1>Reset Your Password</h1>
            </div>
            <div class="card-body">
                <form id="resetPasswordForm" novalidate>
                    <!-- Hidden token field -->
                    <input type="hidden" id="token" name="token" value="<%= token %>">
                    
                    <div class="form-group">
                        <label for="password">New Password</label>
                        <input 
                            type="password" 
                            id="password" 
                            name="password" 
                            class="form-control" 
                            placeholder="Enter your new password"
                            required
                        >
                        <span class="password-toggle" id="togglePassword">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                                <circle cx="12" cy="12" r="3"></circle>
                            </svg>
                        </span>
                        <div class="password-strength">
                            <div class="password-strength-meter" id="strengthMeter"></div>
                        </div>
                        <div class="password-feedback" id="passwordFeedback">Password strength</div>
                        <div class="error-message" id="passwordError"></div>
                        
                        <div class="password-requirements">
                            <div class="requirement" id="req-length">
                                <span class="requirement-icon"></span>
                                At least 8 characters
                            </div>
                            <div class="requirement" id="req-uppercase">
                                <span class="requirement-icon"></span>
                                At least one uppercase letter
                            </div>
                            <div class="requirement" id="req-lowercase">
                                <span class="requirement-icon"></span>
                                At least one lowercase letter
                            </div>
                            <div class="requirement" id="req-number">
                                <span class="requirement-icon"></span>
                                At least one number
                            </div>
                            <div class="requirement" id="req-special">
                                <span class="requirement-icon"></span>
                                At least one special character
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label for="confirmPassword">Confirm Password</label>
                        <input 
                            type="password" 
                            id="confirmPassword" 
                            name="confirmPassword" 
                            class="form-control" 
                            placeholder="Confirm your new password"
                            required
                        >
                        <span class="password-toggle" id="toggleConfirmPassword">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                                <circle cx="12" cy="12" r="3"></circle>
                            </svg>
                        </span>
                        <div class="error-message" id="confirmPasswordError"></div>
                    </div>
                    
                    <button type="submit" class="btn">Reset Password</button>
                </form>
                
                <a href="/signin" class="back-link">Back to Login</a>
            </div>
        </div>
    </div>

    <!-- SweetAlert2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.all.min.js"></script>
    
    <script>
        // Get URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        const token = urlParams.get('token');
        
        // Set token value in hidden field
        if (token) {
            document.getElementById('token').value = token;
        }
        
        // Password toggle functionality
        document.getElementById('togglePassword').addEventListener('click', function() {
            const passwordInput = document.getElementById('password');
            const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
            passwordInput.setAttribute('type', type);
            
            // Change eye icon
            this.innerHTML = type === 'password' ? 
                '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>' : 
                '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path><line x1="1" y1="1" x2="23" y2="23"></line></svg>';
        });
        
        document.getElementById('toggleConfirmPassword').addEventListener('click', function() {
            const confirmPasswordInput = document.getElementById('confirmPassword');
            const type = confirmPasswordInput.getAttribute('type') === 'password' ? 'text' : 'password';
            confirmPasswordInput.setAttribute('type', type);
            
            // Change eye icon
            this.innerHTML = type === 'password' ? 
                '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>' : 
                '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path><line x1="1" y1="1" x2="23" y2="23"></line></svg>';
        });
        
        // Password strength checker
        const passwordInput = document.getElementById('password');
        const strengthMeter = document.getElementById('strengthMeter');
        const passwordFeedback = document.getElementById('passwordFeedback');
        
        // Password requirements
        const requirements = {
            length: { regex: /.{8,}/, element: document.getElementById('req-length') },
            uppercase: { regex: /[A-Z]/, element: document.getElementById('req-uppercase') },
            lowercase: { regex: /[a-z]/, element: document.getElementById('req-lowercase') },
            number: { regex: /[0-9]/, element: document.getElementById('req-number') },
            special: { regex: /[^A-Za-z0-9]/, element: document.getElementById('req-special') }
        };
        
        passwordInput.addEventListener('input', function() {
            const password = this.value;
            let strength = 0;
            let meetsAllRequirements = true;
            
            // Check each requirement
            for (const [key, requirement] of Object.entries(requirements)) {
                const isValid = requirement.regex.test(password);
                if (isValid) {
                    requirement.element.classList.add('met');
                    strength += 20; // Each requirement adds 20% to strength
                } else {
                    requirement.element.classList.remove('met');
                    meetsAllRequirements = false;
                }
            }
            
            // Update strength meter
            strengthMeter.style.width = strength + '%';
            
            // Set color based on strength
            if (strength <= 40) {
                strengthMeter.style.backgroundColor = '#dc3545'; // Red
                passwordFeedback.textContent = 'Weak password';
                passwordFeedback.style.color = '#dc3545';
            } else if (strength <= 80) {
                strengthMeter.style.backgroundColor = '#ffc107'; // Yellow
                passwordFeedback.textContent = 'Moderate password';
                passwordFeedback.style.color = '#ffc107';
            } else {
                strengthMeter.style.backgroundColor = '#28a745'; // Green
                passwordFeedback.textContent = 'Strong password';
                passwordFeedback.style.color = '#28a745';
            }
            
            // Validate password
            if (password && !meetsAllRequirements) {
                this.classList.add('error');
                this.classList.remove('valid');
            } else if (password) {
                this.classList.remove('error');
                this.classList.add('valid');
            } else {
                this.classList.remove('error', 'valid');
            }
        });
        
        // Confirm password validation
        const confirmPasswordInput = document.getElementById('confirmPassword');
        const confirmPasswordError = document.getElementById('confirmPasswordError');
        
        confirmPasswordInput.addEventListener('input', function() {
            const password = passwordInput.value;
            const confirmPassword = this.value;
            
            if (confirmPassword && password !== confirmPassword) {
                this.classList.add('error');
                this.classList.remove('valid');
                confirmPasswordError.textContent = 'Passwords do not match';
                confirmPasswordError.style.display = 'block';
            } else if (confirmPassword) {
                this.classList.remove('error');
                this.classList.add('valid');
                confirmPasswordError.style.display = 'none';
            } else {
                this.classList.remove('error', 'valid');
                confirmPasswordError.style.display = 'none';
            }
        });
        
        // Form submission
        document.getElementById('resetPasswordForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const password = passwordInput.value;
            const confirmPassword = confirmPasswordInput.value;
            const token = document.getElementById('token').value;
            
            // Validate password
            let isValid = true;
            let meetsAllRequirements = true;
            
            for (const [key, requirement] of Object.entries(requirements)) {
                if (!requirement.regex.test(password)) {
                    meetsAllRequirements = false;
                    break;
                }
            }
            
            if (!meetsAllRequirements) {
                document.getElementById('passwordError').textContent = 'Password does not meet all requirements';
                document.getElementById('passwordError').style.display = 'block';
                isValid = false;
            } else {
                document.getElementById('passwordError').style.display = 'none';
            }
            
            if (password !== confirmPassword) {
                confirmPasswordError.textContent = 'Passwords do not match';
                confirmPasswordError.style.display = 'block';
                isValid = false;
            } else {
                confirmPasswordError.style.display = 'none';
            }
            
            if (!isValid) {
                return;
            }
            
            try {
                // Show loading state
                Swal.fire({
                    title: 'Processing',
                    text: 'Please wait...',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });
                
                const response = await fetch('/confirmPassword', {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ token, password, confirmPassword })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    // Show success message
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Your password has been reset successfully.',
                        confirmButtonColor: '#3b5d50'
                    }).then(() => {
                       setTimeout(()=>{
                        window.location.href = data.redirect||'/signin';
                       },1000)
                    });
                }else{
                    Swal.fire({
                        icon:"error",
                        title:"Please Try Again",
                        text:data.message||"Unable To change Password"
                    })
                }
            } catch (error) {
                console.error('Error:', error);
                
                // Show error message
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'An error occurred. Please try again.',
                    confirmButtonColor: '#3b5d50'
                });
            }
        });
    </script>
</body>
</html>