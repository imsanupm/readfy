<%-include('partials/user/header')%>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Order Details</title>
<style>
    /* Base styles and reset */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans",
    "Helvetica Neue", sans-serif;
  line-height: 1.6;
  color: #333;
  background-color: #f5f5f7;
  /* Removed padding-left: 250px; */
}

/* Container for the order details */
.order-container {
  max-width: 1200px;
  margin: 2rem auto;
  padding: 2rem;
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
}

/* Order header */
.order-header {
  margin-bottom: 2rem;
}

.order-title {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.order-title h1 {
  font-size: 1.8rem;
  font-weight: 600;
  color: #1a1a1a;
}

.order-status {
  padding: 0.4rem 1rem;
  border-radius: 20px;
  font-size: 0.85rem;
  font-weight: 500;
}

.order-status.delivered {
  background-color: #e6f7e6;
  color: #2e7d32;
}

.order-id-date {
  display: flex;
  gap: 2rem;
}

.order-info {
  display: flex;
  gap: 0.5rem;
}

.label {
  font-weight: 500;
  color: #666;
}

/* Grid layout for order sections */
.order-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

/* Order sections */
.order-section {
  background-color: #fff;
  border-radius: 8px;
  padding: 1.5rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.order-section h2 {
  font-size: 1.2rem;
  font-weight: 600;
  margin-bottom: 1rem;
  color: #1a1a1a;
  padding-bottom: 0.5rem;
  border-bottom: 1px solid #eee;
}

.info-group {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.info-item {
  display: flex;
  flex-direction: column;
}

.address p {
  margin-bottom: 0.25rem;
}

/* Status timeline */
.status-timeline {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  position: relative;
  padding-left: 1.5rem;
}

.status-timeline::before {
  content: "";
  position: absolute;
  left: 7px;
  top: 0;
  bottom: 0;
  width: 2px;
  background-color: #e0e0e0;
}

.status-item {
  display: flex;
  gap: 1rem;
  position: relative;
}

.status-marker {
  width: 16px;
  height: 16px;
  border-radius: 50%;
  background-color: #e0e0e0;
  position: absolute;
  left: -1.5rem;
  top: 4px;
}

.status-item.completed .status-marker {
  background-color: #4caf50;
}

.status-content {
  display: flex;
  flex-direction: column;
}

.status-title {
  font-weight: 500;
}

.status-date {
  font-size: 0.85rem;
  color: #666;
}

/* Order items */
.items-table {
  border: 1px solid #eee;
  border-radius: 8px;
  overflow: hidden;
}

.table-header {
  display: grid;
  grid-template-columns: 3fr 1fr 1fr 1fr;
  background-color: #f9f9f9;
  padding: 1rem;
  font-weight: 600;
  border-bottom: 1px solid #eee;
}

.table-row {
  display: grid;
  grid-template-columns: 3fr 1fr 1fr 1fr;
  padding: 1rem;
  border-bottom: 1px solid #eee;
  align-items: center;
}

.table-row:last-child {
  border-bottom: none;
}

.product-info {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.product-image {
  width: 60px;
  height: 60px;
  background-color: #f5f5f7;
  border-radius: 6px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.image-placeholder {
  font-weight: bold;
  color: #999;
}

.product-details {
  display: flex;
  flex-direction: column;
}

.product-name {
  font-weight: 500;
}

.product-description {
  font-size: 0.85rem;
  color: #666;
}

/* Order summary */
.order-summary-container {
  display: flex;
  justify-content: flex-end;
  margin-top: 2rem;
}

.order-summary {
  width: 100%;
  max-width: 400px;
}

.summary-items {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.summary-item {
  display: flex;
  justify-content: space-between;
}

.summary-divider {
  height: 1px;
  background-color: #eee;
  margin: 0.5rem 0;
}

.summary-item.total {
  font-weight: 600;
  font-size: 1.1rem;
  margin-top: 0.5rem;
}

.summary-item.discount .value {
  color: #4caf50;
}

/* Order actions */
.order-actions {
  display: flex;
  justify-content: flex-end;
  gap: 1rem;
  margin-top: 2rem;
}

.btn {
  padding: 0.75rem 1.5rem;
  border-radius: 6px;
  font-weight: 500;
  cursor: pointer;
  border: none;
  transition: all 0.2s ease;
}

.btn-primary {
  background-color: #1a73e8;
  color: white;
}

.btn-primary:hover {
  background-color: #1557b0;
}

.btn-secondary {
  background-color: #f5f5f7;
  color: #333;
}

.btn-secondary:hover {
  background-color: #e5e5e7;
}

/* Responsive adjustments */
@media (max-width: 1024px) {
  body {
    /* Removed padding-left: 200px; */
  }
}

@media (max-width: 768px) {
  body {
    padding-left: 0;
  }

  .order-container {
    margin: 0;
    padding: 1rem;
    border-radius: 0;
    box-shadow: none;
  }

  .order-id-date {
    flex-direction: column;
    gap: 0.5rem;
  }

  .table-header,
  .table-row {
    grid-template-columns: 2fr 1fr 1fr 1fr;
  }

  .product-image {
    width: 40px;
    height: 40px;
  }
}

@media (max-width: 640px) {
  .order-title {
    flex-direction: column;
    align-items: flex-start;
    gap: 0.5rem;
  }

  .table-header {
    display: none;
  }

  .table-row {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    padding: 1rem;
  }

  .col {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  .col::before {
    content: attr(data-label);
    font-weight: 500;
  }

  .product-col {
    flex-direction: column;
  }

  .product-col::before {
    margin-bottom: 0.5rem;
  }

  .order-actions {
    flex-direction: column;
    gap: 0.75rem;
  }

  .btn {
    width: 100%;
  }
}

.product-thumb {
  width: 60px;
  height: 60px;
  object-fit: cover;
  border-radius: 8px;
}

/* Custom SweetAlert Styles */
.custom-swal-popup {
  border-radius: 12px !important;
  box-shadow: 0 10px 30px rgba(59, 93, 80, 0.2) !important;
  border: 2px solid #f8f9fa !important;
}

.custom-swal-title {
  font-size: 1.5rem !important;
  font-weight: 600 !important;
  color: #3b5d50 !important;
  margin-bottom: 0.5rem !important;
}

.custom-swal-title-success {
  font-size: 1.5rem !important;
  font-weight: 600 !important;
  color: #28a745 !important;
  margin-bottom: 0.5rem !important;
}

.custom-swal-title-error {
  font-size: 1.5rem !important;
  font-weight: 600 !important;
  color: #dc3545 !important;
  margin-bottom: 0.5rem !important;
}

.custom-swal-content {
  font-size: 1rem !important;
  color: #6c757d !important;
  line-height: 1.5 !important;
}

.custom-swal-confirm {
  background-color: #3b5d50 !important;
  color: white !important;
  border: none !important;
  border-radius: 8px !important;
  padding: 12px 24px !important;
  font-weight: 500 !important;
  font-size: 1rem !important;
  transition: all 0.3s ease !important;
  margin: 0 8px !important;
}

.custom-swal-confirm:hover {
  background-color: #2d4a40 !important;
  transform: translateY(-1px) !important;
  box-shadow: 0 4px 12px rgba(59, 93, 80, 0.3) !important;
}

.custom-swal-cancel {
  background-color: #f8f9fa !important;
  color: #6c757d !important;
  border: 2px solid #dee2e6 !important;
  border-radius: 8px !important;
  padding: 12px 24px !important;
  font-weight: 500 !important;
  font-size: 1rem !important;
  transition: all 0.3s ease !important;
  margin: 0 8px !important;
}

.custom-swal-cancel:hover {
  background-color: #e9ecef !important;
  border-color: #adb5bd !important;
  transform: translateY(-1px) !important;
  box-shadow: 0 4px 12px rgba(108, 117, 125, 0.2) !important;
}

.custom-swal-error-button {
  background-color: #dc3545 !important;
  color: white !important;
  border: none !important;
  border-radius: 8px !important;
  padding: 12px 24px !important;
  font-weight: 500 !important;
  font-size: 1rem !important;
  transition: all 0.3s ease !important;
  margin: 0 8px !important;
}

.custom-swal-error-button:hover {
  background-color: #c82333 !important;
  transform: translateY(-1px) !important;
  box-shadow: 0 4px 12px rgba(220, 53, 69, 0.3) !important;
}

/* Warning icon customization */
.swal2-icon.swal2-warning {
  border-color: #3b5d50 !important;
  color: #3b5d50 !important;
}

.swal2-icon.swal2-warning .swal2-icon-content {
  color: #3b5d50 !important;
}

/* Success icon customization */
.swal2-icon.swal2-success {
  border-color: #28a745 !important;
}

.swal2-icon.swal2-success .swal2-success-ring {
  border-color: #28a745 !important;
}

.swal2-icon.swal2-success .swal2-success-fix {
  background-color: #28a745 !important;
}

.swal2-icon.swal2-success [class^='swal2-success-line'] {
  background-color: #28a745 !important;
}

/* Error icon customization */
.swal2-icon.swal2-error {
  border-color: #dc3545 !important;
}

.swal2-icon.swal2-error .swal2-x-mark-line-left,
.swal2-icon.swal2-error .swal2-x-mark-line-right {
  background-color: #dc3545 !important;
}

/* Loading spinner customization */
.swal2-loader {
  border-color: #3b5d50 transparent #3b5d50 transparent !important;
}

/* Animation enhancements */
.swal2-popup.swal2-show {
  animation: swal2-show 0.3s ease-out !important;
}

@keyframes swal2-show {
  0% {
    transform: scale(0.7) translateY(-20px);
    opacity: 0;
  }
  100% {
    transform: scale(1) translateY(0);
    opacity: 1;
  }
}
</style>
<style>
  .table-row {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 12px 0;
  border-bottom: 1px solid #ccc;
}

.col {
  padding: 8px;
}

/* Ensure .action-col is aligned right and not squished */
.action-col {
  min-width: 100px;
  text-align: right;
}






.order-status {
  padding: 6px 12px;
  border-radius: 20px;
  font-weight: 500;
  font-size: 0.9rem;
  color: white;
  display: inline-block;
}

.order-status.pending {
  background-color: #FFA500;
}

.order-status.processing {
  background-color: #007BFF;
}

.order-status.shipped {
  background-color: #6F42C1;
}

.order-status.delivered {
  background-color: #28A745;
}

.order-status.cancelled {
  background-color: #DC3545;
}

.order-status.return-requested {
  background-color: #20C997;
}

.order-status.returned {
  background-color: #6C757D;
}

.order-status.payment-failed {
  background-color: #dc3545; /* Red for failed payments */
}

</style>


</head>

<body>
 
  <div class="order-container">
    <div class="order-header">
      <div class="order-title">
  <h1>Order Details</h1>
  <span class="order-status <%= orderData.status.toLowerCase().replace(/\s/g, '-') %>">
    <%= orderData.status %>
  </span>
</div>

      <div class="order-id-date">
        <div class="order-info">
          <span class="label">Order Number:</span>
          <span class="value"><%=orderData.orderId%></span>
        </div>
        <div class="order-info">
          <span class="label">Order Date:</span>
          <span class="value">May 21, 2025</span>
        </div>
      </div>
    </div>

    <div class="order-grid">
      <div class="order-section customer-info">
        <h2>Customer Information</h2>
        <div class="info-group">
          <div class="info-item">
            <span class="label">Name:  </span>
            <span class="label"> <%=orderData.userData.name%></span>
          </div>
          <div class="info-item">
            <span class="label">Email:</span>
            <span class="value"><%=orderData.userData.email%></span>
          </div>
          <div class="info-item">
            <span class="label">Phone:</span>
            <span class="value"><%=orderData.userData.phone%></span>
          </div>
        </div>
      </div>

      <div class="order-section shipping-info">
        <h2>Shipping Address</h2>
        <div class="info-group">
          <div class="address">
            <p><%= orderData.address.house_flat %>, <%= orderData.address.street %></p>
            <p><%= orderData.address.village_city %>, <%= orderData.address.district %> - <%= orderData.address.pincode %></p>
            <p><%= orderData.address.state %></p>
          </div>
          <div class="info-item">
            <span class="label">Shipping Method:</span>
            <span class="value">Express Delivery</span>
          </div>
        </div>
      </div>

      <div class="order-section payment-info">
        <h2>Payment Information</h2>
        <div class="info-group">
          <div class="info-item">
            <span class="label">Payment Method:</span>
            <span class="value"><%=orderData.paymentMethod%></span>
          </div>
          <div class="info-item">
            <span class="label">Billing Address:</span>
            <span class="value">Same as shipping</span>
          </div>
        </div>
      </div>

      <div class="order-section order-status-info">
        <h2>Order Status</h2>
        <div class="status-timeline">
          <div class="status-item completed">
            <div class="status-marker"></div>
            <div class="status-content">
              <span class="status-title">Order Placed</span>
              <span class="status-date">May 21, 2025 - 10:30 AM</span>
            </div>
          </div>
          <div class="status-item completed">
            <div class="status-marker"></div>
            <div class="status-content">
              <span class="status-title">Processing</span>
              <span class="status-date">May 21, 2025 - 11:45 AM</span>
            </div>
          </div>
          <div class="status-item completed">
            <div class="status-marker"></div>
            <div class="status-content">
              <span class="status-title">Shipped</span>
              <span class="status-date">May 22, 2025 - 09:15 AM</span>
            </div>
          </div>
          <div class="status-item completed">
            <div class="status-marker"></div>
            <div class="status-content">
              <span class="status-title">Delivered</span>
              <span class="status-date">May 24, 2025 - 02:30 PM</span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="order-section order-items">
      <h2>Order Items</h2>
      <div class="items-table">
        <div class="table-header">
          <div class="col product-col">Product</div>
          <div class="col price-col">Price</div>
          <div class="col quantity-col">Quantity</div>
          <div class="col total-col">Total</div>
         
        </div>
    
     <% orderData.orderedItems.forEach((item, index) => { %>
  <div class="table-row" id="product-<%= item.product %>">
    <div class="col product-col">
      <div class="product-info">
        <div class="product-image">
          <% if (item.productDetails.images && item.productDetails.images.length > 0) { %>
            <img src="<%= item.productDetails.images[0] %>" alt="<%= item.productDetails.name %>" class="product-thumb">
          <% } else { %>
            <div class="image-placeholder">PH</div>
          <% } %>
        </div>
        <div class="product-details">
          <div class="product-name"><%= item.productDetails.name %></div>
          <% if (item.productDetails.category) { %>
            <div class="product-description"><%= item.productDetails.category %></div>
          <% } %>
        </div>
      </div>
    </div>

    <div class="col price-col">₹<%= item.price.toFixed(2) %></div>
    <div class="col quantity-col"><%= item.quantity %></div>
    <div class="col total-col">₹<%= (item.price * item.quantity).toFixed(2) %></div>

    <!-- Action column on the right -->
    <div class="col action-col">
  <% if (orderData.status === "Payment Failed") { %>
  <!-- Show nothing -->
     <span style="color: red; font-weight: 500;">Payment Failed</span>
<% } else if (item.status !== "Returned" && item.status !== "Cancelled" && item.status !== "Shipped" && item.status !== "Return Requested") { %>
  <button 
    class="cancel-btn" 
    data-product-id="<%= item.product %>" 
    data-order-id="<%= orderData._id %>" 
    style="background-color: #dc3545; color: white; border: none; padding: 6px 14px; border-radius: 6px; cursor: pointer;">
    Cancel
  </button>
<% } else if (item.status === 'Delivered') { %>
  <button 
    class="return-btn" 
    data-product-id="<%= item.product %>" 
    data-order-id="<%= orderData._id %>" 
    style="background-color: #3b5d50; color: white; border: none; padding: 6px 14px; border-radius: 6px; cursor: pointer;">
    Return
  </button>
<% } else { %>
  <%= item.status %>
<% } %>

</div>
  </div>
<% }); %>

      </div>
    </div>

    <div class="order-summary-container">
      <div class="order-section order-summary">
        <h2>Order Summary</h2>
        <div class="summary-items">
          <div class="summary-item">
            <span class="label">Subtotal:</span>
            <span class="value">₹<%= subTotal %></span>
          </div>
          <div class="summary-item">
            <span class="label">Shipping:</span>
            <span class="value">₹<%= deliveryCharge %></span>
          </div>
          <div class="summary-item">
            <span class="label">Tax:</span>
            <span class="value">₹<%= gstAmount %></span>
          </div>
          <% if (orderData.discount && orderData.discount > 0) { %>
          <div class="summary-item discount">
            <span class="label">Discount:</span>
            <span class="value">-₹<%= orderData.discount.toFixed(2) %></span>
          </div>
          <% } %>
          <div class="summary-divider"></div>
          <div class="summary-item total">
            <span class="label">Total:</span>
            <span class="value">₹<%= totalPrice %></span>
          </div>
        </div>
      </div>
    </div>
    <%if(orderData.status!=="Payment Failed"){%>
    <div class="order-actions">
      <a href="/downloadInvoice/<%= orderData.orderId %>" class="btn btn-secondary">Download Invoice</a>
   
    </div>
  <%}%>
    <% if (orderData.status === 'Payment Failed' && orderData.paymentMethod === 'razorpay') { %>
  <div class="order-actions" style="text-align: center; margin-top: 20px;">
    <button 
      id="retry-payment"
      data-order-id="<%= orderData.paymentDetails.orderId %>"
      style="
        background-color: #7fac20;
        border: none;
        color: #212529;
        padding: 10px 20px;
        font-size: 16px;
        font-weight: 500;
        border-radius: 6px;
        cursor: pointer;
        transition: background-color 0.3s ease;
      "
      onmouseover="this.style.backgroundColor='#e0a800';"
      onmouseout="this.style.backgroundColor='#ffc107';"
    >
      Retry Payment
    </button>
  </div>
<% } %>


    <% if (orderData.status === "Delivered") { %>
      <div class="order-actions">
        <button
          class="btn btn-danger"
          style="background-color: #3b5d50; border-color: #3b5d50; color: white;"
          onclick="openReturnModal('<%= orderData.orderId %>')">
          Return Order
        </button>
      </div>
    <% } else if (orderData.status !== "Returned"&&orderData.status !=="Cancelled"&&orderData.status!=="Shipped"&&orderData.status!=="Return Requested"&&orderData.status!=="Payment Failed") { %>
      <div class="order-actions">
        <button
          class="btn btn-danger"
          style="background-color: #dc3545; border-color: #dc3545; color: white;"
          onclick="showCancelConfirmation('<%= orderData.orderId %>')">
          Cancel Order
        </button>
      </div>
    <% } %>

    <!-- Modal -->  
    <div id="returnModal" class="modal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background-color: rgba(0,0,0,0.5); z-index:1000;">
      <div style="background-color:white; margin:10% auto; padding:20px; border-radius:8px; width:90%; max-width:400px; position:relative;">
        <h5 style="color:#3b5d50;">Return Reason</h5>
        <textarea id="returnReason" class="form-control" placeholder="Enter reason..." style="margin-bottom: 15px;"></textarea>
        <div style="display: flex; justify-content: flex-end;">
          <button onclick="closeReturnModal()" style="margin-right: 10px; background:#ccc; border:none; padding: 8px 12px; border-radius: 5px;">Cancel</button>
          <button onclick="submitReturn()" style="background-color:#3b5d50; color:white; border:none; padding: 8px 12px; border-radius: 5px;">Submit</button>
        </div>
      </div>
    </div>
  </div>


  <!-- Return Reason Modal -->
<!-- Return Reason Modal -->
<div class="modal fade" id="returnReasonModal" tabindex="-1" aria-labelledby="returnReasonModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <form id="returnForm" novalidate>
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Return Reason</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <input type="hidden" id="returnOrderId">
          <input type="hidden" id="returnProductId">
          <div class="mb-3">
            <label for="returnReasonText" class="form-label">Reason</label>
            <textarea class="form-control" id="returnReasonText" rows="3" required></textarea>
          </div>
        </div>
        <div class="modal-footer">
          <button type="submit" class="btn btn-primary">Submit Reason</button>
        </div>
      </div>
    </form>
  </div>
</div>


  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <script>
    async function showCancelConfirmation(orderId) {
      const result = await Swal.fire({
        title: 'Cancel Order?',
        text: 'Are you sure you want to cancel this order? This action cannot be undone.',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3b5d50',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'Yes, Cancel Order',
        cancelButtonText: 'Keep Order',
        reverseButtons: true,
        background: '#ffffff',
        color: '#333333',
        customClass: {
          popup: 'custom-swal-popup',
          title: 'custom-swal-title',
          content: 'custom-swal-content',
          confirmButton: 'custom-swal-confirm',
          cancelButton: 'custom-swal-cancel'
        },
        buttonsStyling: false,
        focusConfirm: false,
        focusCancel: true
      });

      if (result.isConfirmed) {
        Swal.fire({
          title: 'Cancelling Order...',
          text: 'Please wait while we process your request.',
          allowOutsideClick: false,
          allowEscapeKey: false,
          showConfirmButton: false,
          background: '#ffffff',
          color: '#333333',
          customClass: {
            popup: 'custom-swal-popup'
          },
          didOpen: () => {
            Swal.showLoading();
          }
        });

        try {
          const response = await fetch(`/cancelOrder/${orderId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ orderId: orderId })
          });

          const data = await response.json();

          if (response.ok && data.success) {
            await Swal.fire({
              title: 'Order Cancelled!',
              text: data.message || 'Your order has been successfully cancelled.',
              icon: 'success',
              confirmButtonColor: '#3b5d50',
              confirmButtonText: 'OK',
              background: '#ffffff',
              color: '#333333',
              customClass: {
                popup: 'custom-swal-popup',
                title: 'custom-swal-title-success',
                content: 'custom-swal-content',
                confirmButton: 'custom-swal-confirm'
              },
              buttonsStyling: false
            });

            setTimeout(() => {
              window.location.reload();
            }, 300);

          } else {
            await Swal.fire({
              title: 'Cancellation Failed',
              text: data.message || 'Unable to cancel your order. Please try again.',
              icon: 'error',
              confirmButtonColor: '#dc3545',
              confirmButtonText: 'Try Again',
              background: '#ffffff',
              color: '#333333',
              customClass: {
                popup: 'custom-swal-popup',
                title: 'custom-swal-title-error',
                content: 'custom-swal-content',
                confirmButton: 'custom-swal-error-button'
              },
              buttonsStyling: false
            });
          }
        } catch (error) {
          console.error('Error cancelling order:', error);
          
          await Swal.fire({
            title: 'Connection Error',
            text: 'Unable to connect to the server. Please check your internet connection and try again.',
            icon: 'error',
            confirmButtonColor: '#dc3545',
            confirmButtonText: 'OK',
            background: '#ffffff',
            color: '#333333',
            customClass: {
              popup: 'custom-swal-popup',
              title: 'custom-swal-title-error',
              content: 'custom-swal-content',
              confirmButton: 'custom-swal-error-button'
            },
            buttonsStyling: false
          });
        }
      }
    }

    let currentOrderId = null;

    function openReturnModal(orderId) {
      currentOrderId = orderId;
      document.getElementById('returnModal').style.display = 'block';
    }

    function closeReturnModal() {
      document.getElementById('returnModal').style.display = 'none';
      document.getElementById('returnReason').value = '';
    }

    async function submitReturn() {
      const reason = document.getElementById('returnReason').value.trim();

      if (!reason) {
        Swal.fire({
          icon: 'warning',
          title: 'Missing Reason',
          text: 'Please enter a reason for return.',
        });
        return;
      }

      try {
        const response = await fetch(`/returnOrder/${currentOrderId}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ reason })
        });

        if (response.ok) {
          await Swal.fire({
            icon: 'success',
            title: 'Return Submitted',
            text: 'Your return request has been submitted successfully.',
          });
          closeReturnModal();
          location.reload();
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Failed',
            text:'Failed to submit return. Please try again later.',
          });
        }
      } catch (err) {
        console.error(err);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'Something went wrong while submitting the return.',
        });
      }
    }
  </script>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.cancel-btn').forEach(button => {
      button.addEventListener('click', async (e) => {
        const productId = button.getAttribute('data-product-id');
        const orderId = button.getAttribute('data-order-id');

        const result = await Swal.fire({
          title: 'Are you sure?',
          text: "Do you really want to cancel this item?",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#d33',
          cancelButtonColor: '#3085d6',
          confirmButtonText: 'Yes, cancel it!',
          cancelButtonText: 'No'
        });

        if (!result.isConfirmed) return;

        try {
          const res = await fetch(`/specif/order/cancel`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ orderId, productId })
          });

          const data = await res.json();
          if (data.success) {
            await Swal.fire({
              title: 'Cancelled!',
              text: 'Item cancelled successfully.',
              icon: 'success',
              timer: 1500,
              showConfirmButton: false
            });
            location.reload();
          } else {
            Swal.fire({
              title: 'Failed',
              text: data.message || "Cancellation failed.",
              icon: 'error'
            });
          }
        } catch (err) {
          console.error(err);
          Swal.fire({
            title: 'Error',
            text: 'An error occurred while cancelling the item.',
            icon: 'error'
          });
        }
      });
    });
  });
</script>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-VzQ0pZLqIkP08Yv2om3eIqTEn7OXLJ5H7J7Wy+PfsFbip6pvn7hxhv3ZV8PoB+YF" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>


<script>
  // When return button is clicked
  document.querySelectorAll('.return-btn').forEach(button => {
    button.addEventListener('click', (e) => {
      const orderId = button.getAttribute('data-order-id');
      const productId = button.getAttribute('data-product-id');

      document.getElementById('returnOrderId').value = orderId;
      document.getElementById('returnProductId').value = productId;
      document.getElementById('returnReasonText').value = '';

      const modal = new bootstrap.Modal(document.getElementById('returnReasonModal'));
      modal.show();
    });
  });

  // Handle form submission
  document.getElementById('returnForm').addEventListener('submit', async function (e) {
    e.preventDefault();

    const orderId = document.getElementById('returnOrderId').value;
    const productId = document.getElementById('returnProductId').value;
    const reason = document.getElementById('returnReasonText').value;

    try {
      const res = await fetch('/specific/order-return', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderId, productId, reason })
      });

      const data = await res.json();
      if (data.success) {
        alert('Return request submitted successfully.');
        window.location.reload();
      } else {
        alert(data.message || 'Something went wrong.');
      }
    } catch (err) {
      alert('Error submitting return request.');
      console.error(err);
    }
  });
</script>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const retryBtn = document.getElementById("retry-payment");
    if (retryBtn) {
      retryBtn.addEventListener("click", async () => {
        const orderId = retryBtn.getAttribute("data-order-id");

        const res = await fetch("/api/retryPaymentWithExistingOrder", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ orderId })
        });

        const data = await res.json();

        if (!data.success) {
          return Swal.fire("Error", data.message, "error");
        }

        const razorpay = new Razorpay({
          key: data.key,
          amount: data.amount,
          currency: "INR",
          name: "Readify",
          description: "Retry Payment",
          order_id: data.razorpayOrderId,
          handler: async function (response) {
            const verifyRes = await fetch("/verifyRazorpayPayment", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                razorpay_order_id: response.razorpay_order_id,
                razorpay_payment_id: response.razorpay_payment_id,
                razorpay_signature: response.razorpay_signature,
                originalOrderId: orderId
              })
            });

            const result = await verifyRes.json();
            if (result.success) {
              window.location.href = "/orderConfirmation";
            } else {
              Swal.fire("Payment Failed", result.message, "error");
            }
          },
          prefill: {
            name: data.user.name,
            email: data.user.email,
            contact: data.user.phone
          },
          theme: {
            color: "#3b5d50"
          }
        });

        razorpay.open();
      });
    }
  });
</script>


</body>
</html>

<%-include('partials/user/footer')%>