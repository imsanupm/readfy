<!DOCTYPE HTML>
<html lang="en">

<%-include('partials/admin/headTag.ejs') %>
<body>
    <div class="screen-overlay"></div>
   <%- include('partials/admin/navBar.ejs') %>
    <main class="main-wrap">
       <%- include('partials/admin/header.ejs') %> 



        <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sales Report Dashboard</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary-color: #3b5d50;
            --primary-dark: #2d4a3f;
            --primary-light: #4a6b5e;
            --accent-color: #5a7c6f;
            --background: #ffffff;
            --surface: #ffffff;
            --surface-hover: #f8faf9;
            --border: #e5e7eb;
            --border-light: #f3f4f6;
            --text-primary: #1f2937;
            --text-secondary: #6b7280;
            --text-muted: #9ca3af;
            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #f8faf9 0%, #ffffff 100%);
            color: var(--text-primary);
            line-height: 1.6;
            min-height: 100vh;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
        }

        /* Header Section */
        .header {
            background: var(--surface);
            border-radius: 16px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: var(--shadow-md);
            border: 1px solid var(--border-light);
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1.5rem;
        }

        .header-title {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .title-icon {
            width: 48px;
            height: 48px;
            background: linear-gradient(135deg, var(--primary-color), var(--primary-light));
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.5rem;
            box-shadow: var(--shadow-md);
        }

        .title-text h1 {
            font-size: 2rem;
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 0.25rem;
        }

        .title-text p {
            color: var(--text-secondary);
            font-size: 0.95rem;
            font-weight: 400;
        }

        .header-actions {
            display: flex;
            gap: 0.75rem;
        }

        .export-btn {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 10px;
            font-weight: 500;
            font-size: 0.9rem;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            text-decoration: none;
            box-shadow: var(--shadow-sm);
        }

        .export-btn.pdf {
            background: var(--primary-color);
            color: white;
        }

        .export-btn.pdf:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

        .export-btn.excel {
            background: #059669;
            color: white;
        }

        .export-btn.excel:hover {
            background: #047857;
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

        /* Filters Section */
        .filters-section {
            background: var(--surface);
            border-radius: 16px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: var(--shadow-md);
            border: 1px solid var(--border-light);
        }

        .filters-header {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            margin-bottom: 1.5rem;
        }

        .filters-header h2 {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--primary-color);
        }

        .filters-icon {
            width: 24px;
            height: 24px;
            color: var(--primary-color);
        }

        .filters-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .filter-group label {
            font-size: 0.875rem;
            font-weight: 500;
            color: var(--text-secondary);
            text-transform: uppercase;
            letter-spacing: 0.025em;
        }

        .filter-input {
            padding: 0.75rem 1rem;
            border: 1.5px solid var(--border);
            border-radius: 10px;
            font-size: 0.95rem;
            transition: all 0.3s ease;
            background: var(--surface);
        }

        .filter-input:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(59, 93, 80, 0.1);
        }

        .period-selector {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
            margin-bottom: 1rem;
        }

        .period-btn {
            padding: 0.625rem 1.25rem;
            border: 1.5px solid var(--border);
            background: var(--surface);
            color: var(--text-secondary);
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.875rem;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .period-btn:hover {
            border-color: var(--primary-color);
            color: var(--primary-color);
        }

        .period-btn.active {
            background: var(--primary-color);
            border-color: var(--primary-color);
            color: white;
            box-shadow: var(--shadow-sm);
        }

        .apply-filters-btn {
            background: linear-gradient(135deg, var(--primary-color), var(--primary-light));
            color: white;
            border: none;
            padding: 0.875rem 2rem;
            border-radius: 10px;
            font-weight: 600;
            font-size: 0.95rem;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: var(--shadow-md);
        }

        .apply-filters-btn:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

        /* Metrics Grid */
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .metric-card {
            background: var(--surface);
            border-radius: 16px;
            padding: 1.75rem;
            box-shadow: var(--shadow-md);
            border: 1px solid var(--border-light);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }

        .metric-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--primary-color), var(--primary-light));
        }

        .metric-card:hover {
            transform: translateY(-4px);
            box-shadow: var(--shadow-xl);
        }

        .metric-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 1rem;
        }

        .metric-title {
            font-size: 0.875rem;
            font-weight: 500;
            color: var(--text-secondary);
            text-transform: uppercase;
            letter-spacing: 0.025em;
        }

        .metric-icon {
            width: 40px;
            height: 40px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.25rem;
            color: white;
        }

        .metric-icon.sales { background: linear-gradient(135deg, #3b5d50, #4a6b5e); }
        .metric-icon.orders { background: linear-gradient(135deg, #059669, #10b981); }
        .metric-icon.customers { background: linear-gradient(135deg, #dc2626, #ef4444); }
        .metric-icon.discount { background: linear-gradient(135deg, #7c3aed, #8b5cf6); }

        .metric-value {
            font-size: 2.25rem;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 0.5rem;
            line-height: 1;
        }

        .metric-change {
            display: flex;
            align-items: center;
            gap: 0.375rem;
            font-size: 0.875rem;
            font-weight: 500;
        }

        .metric-change.positive { color: #059669; }
        .metric-change.negative { color: #dc2626; }

        /* Report Table */
        .report-section {
            background: var(--surface);
            border-radius: 16px;
            box-shadow: var(--shadow-md);
            border: 1px solid var(--border-light);
            overflow: hidden;
        }

        .report-header {
            background: linear-gradient(135deg, var(--primary-color), var(--primary-light));
            color: white;
            padding: 1.5rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .report-title {
            font-size: 1.125rem;
            font-weight: 600;
        }

        .report-meta {
            font-size: 0.875rem;
            opacity: 0.9;
        }

        .table-container {
            overflow-x: auto;
            max-height: 600px;
            overflow-y: auto;
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
        }

        .data-table th {
            background: var(--surface-hover);
            color: var(--text-secondary);
            padding: 1rem 1.5rem;
            text-align: left;
            font-weight: 600;
            font-size: 0.875rem;
            text-transform: uppercase;
            letter-spacing: 0.025em;
            border-bottom: 1px solid var(--border);
            position: sticky;
            top: 0;
            z-index: 10;
        }

        .data-table td {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid var(--border-light);
            font-size: 0.9rem;
            transition: background-color 0.2s ease;
        }

        .data-table tr:hover {
            background: var(--surface-hover);
        }

        .amount-cell {
            font-weight: 600;
            color: var(--primary-color);
        }

        .discount-cell {
            font-weight: 500;
            color: #dc2626;
        }

        .no-data {
            text-align: center;
            padding: 4rem 2rem;
            color: var(--text-muted);
            font-size: 1rem;
        }

        .no-data-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }

        /* Loading State */
        .loading {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 4rem 2rem;
            color: var(--text-secondary);
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 3px solid var(--border);
            border-top: 3px solid var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-bottom: 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }

            .header-content {
                flex-direction: column;
                text-align: center;
            }

            .title-text h1 {
                font-size: 1.75rem;
            }

            .filters-grid {
                grid-template-columns: 1fr;
            }

            .period-selector {
                justify-content: center;
            }

            .metrics-grid {
                grid-template-columns: 1fr;
            }

            .report-header {
                flex-direction: column;
                gap: 0.5rem;
                text-align: center;
            }

            .data-table th,
            .data-table td {
                padding: 0.75rem 1rem;
                font-size: 0.8rem;
            }
        }

        @media (max-width: 480px) {
            .data-table th,
            .data-table td {
                padding: 0.5rem 0.75rem;
                font-size: 0.75rem;
            }

            .metric-value {
                font-size: 1.75rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <div class="header-content">
                <div class="header-title">
                    <div class="title-icon">📊</div>
                    <div class="title-text">
                        <h1>Sales Analytics</h1>
                        <p>Comprehensive sales reporting and insights</p>
                    </div>
                </div>
                <div class="header-actions">
                    <button class="export-btn pdf" onclick="exportToPDF()">
                        <span>📄</span>
                        Export PDF
                    </button>
                    <button class="export-btn excel" onclick="exportToExcel()">
                        <span>📊</span>
                        Export Excel
                    </button>
                </div>
            </div>
        </div>

        <!-- Filters Section -->
        <div class="filters-section">
            <div class="filters-header">
                <svg class="filters-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.207A1 1 0 013 6.5V4z"></path>
                </svg>
                <h2>Report Filters</h2>
            </div>

            <div class="period-selector">
                <button class="period-btn active" data-period="today">Today</button>
                <!-- <button class="period-btn" data-period="yesterday">Yesterday</button> -->
                <button class="period-btn" data-period="week">This Week</button>
                <button class="period-btn" data-period="month">This Month</button>
                <button class="period-btn" data-period="year">This Year</button>
                <button class="period-btn" data-period="custom">Custom Range</button>
            </div>

            <div class="filters-grid">
                <div class="filter-group">
                    <label for="startDate">Start Date</label>
                    <input type="date" id="startDate" class="filter-input">
                </div>
                <div class="filter-group">
                    <label for="endDate">End Date</label>
                    <input type="date" id="endDate" class="filter-input">
                </div>
               
            </div>

           
        </div>

        <!-- Metrics Grid -->
         <div class="metrics-grid">
            <div class="metric-card">
                <div class="metric-header">
                    <div class="metric-title">Total Sales</div>
                    <div class="metric-icon sales">💰</div>
                </div>
                <div class="metric-value" id="totalSales">₹ <%=totalOrderAmount%></div>
                <div class="metric-change positive" id="salesChange">
                    <span>↗</span> +0% from last period
                </div>
            </div>

            <!-- <div class="metric-card">
                <div class="metric-header">
                    <div class="metric-title">Total Orders</div>
                    <div class="metric-icon orders">📦</div>
                </div>
                <div class="metric-value" id="totalOrders"></div>
                <div class="metric-change positive" id="ordersChange">
                    <span>↗</span> +0% from last period
                </div>
            </div>  -->

            <div class="metric-card">
                <div class="metric-header">
                    <div class="metric-title">Total Delivered Orders</div>
                    <div class="metric-icon customers">📦</div>
                </div>
                <div class="metric-value" id="totalCustomers"><%=totalSalesCount%></div>
                <div class="metric-change positive" id="customersChange">
                    <span>↗</span> +0% from last period
                </div>
            </div>

            <!-- <div class="metric-card">
                <div class="metric-header">
                    <div class="metric-title">Total Discounts</div>
                    <div class="metric-icon discount">🏷️</div>
                </div>
                <div class="metric-value" id="totalDiscounts">₹</div>
                <div class="metric-change negative" id="discountsChange">
                    <span>↘</span> -0% from last period
                </div>
            </div> -->
        </div> 

        <!-- Report Table -->
        <div class="report-section">
            <div class="report-header">
                <div class="report-title">Detailed Sales Report</div>
                <div class="report-meta" id="reportMeta">Last updated: Just now</div>
            </div>

            <div class="table-container">
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Date</th>
                            <th>Customer</th>
                            <th>Product Details</th>
                            <th>Order Amount</th>
                            <th>Discount</th>
                            <!-- <th>Empty area</th>
                            <th>Net Amount</th> -->
                            <th>Payment Method</th>
                        </tr>
                    </thead>
                    <tbody id="reportTableBody">
                        <tr>
                            <td colspan="9" class="no-data">
                                <div class="no-data-icon">📊</div>
                                <div>No sales data available for the selected period</div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

  

<!-- <script>
 
    const periodButtons = document.querySelectorAll('.period-btn');
    const startDateInput = document.getElementById('startDate');
    const endDateInput = document.getElementById('endDate');

    let selectedPeriod = 'today';

    periodButtons.forEach(button => {
        button.addEventListener('click', () => {
            periodButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');

            selectedPeriod = button.dataset.period;

            const custom = selectedPeriod === 'custom';
            startDateInput.disabled = !custom;
            endDateInput.disabled = !custom;

            fetchReport();
        });
    });

    startDateInput.addEventListener('change', () => {
        if (selectedPeriod === 'custom') fetchReport();
    });

    endDateInput.addEventListener('change', () => {
        if (selectedPeriod === 'custom') fetchReport();
    });

    function fetchReport() {
        const startDate = startDateInput.value;
        const endDate = endDateInput.value;

        const data = {
            period: selectedPeriod,
            ...(selectedPeriod === 'custom' && { startDate, endDate })
        };

        fetch('/admin/sales-report', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(res => res.json())
        .then(response => {
            updateReportTable(response.reportData);
        })
        .catch(error => {
            console.error('Error:', error);
        });
    }

    function updateReportTable(data) {
        const tbody = document.getElementById('reportTableBody');
        tbody.innerHTML = '';

        if (!data || data.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="9" class="no-data">
                        <div class="no-data-icon">📊</div>
                        <div>No sales data available for the selected period</div>
                    </td>
                </tr>`;
            return;
        }

        data.forEach(item => {
            const row = `
                <tr>
                    <td>${item.orderId}</td>
                    <td>${item.date}</td>
                    <td>${item.customer}</td>
                    <td>${item.products}</td>
                    <td>₹${item.amount}</td>
                    <td>₹${item.discount}</td>
                    <td>${item.coupon || '-'}</td>
                    <td>₹${item.netAmount}</td>
                    <td>${item.paymentMethod}</td>
                </tr>`;
            tbody.innerHTML += row;
        });
    }

    fetchReport(); // Load default report on page load
</script>
  -->



  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.28/jspdf.plugin.autotable.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>


  <!-- <script>
    const periodButtons = document.querySelectorAll('.period-btn');
    const startDateInput = document.getElementById('startDate');
    const endDateInput = document.getElementById('endDate');

    let selectedPeriod = 'today';

    periodButtons.forEach(button => {
        button.addEventListener('click', () => {
            periodButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');

            selectedPeriod = button.dataset.period;

            const custom = selectedPeriod === 'custom';
            startDateInput.disabled = !custom;
            endDateInput.disabled = !custom;

            fetchReport();
        });
    });

    startDateInput.addEventListener('change', () => {
        if (selectedPeriod === 'custom') fetchReport();
    });

    endDateInput.addEventListener('change', () => {
        if (selectedPeriod === 'custom') fetchReport();
    });

    function fetchReport() {
        const startDate = startDateInput.value;
        const endDate = endDateInput.value;

        const queryParams = new URLSearchParams({
            period: selectedPeriod,
            ...(selectedPeriod === 'custom' && { startDate, endDate })
        });

        fetch(`/admin/sales-report?${queryParams.toString()}`)
            .then(res => res.json())
            .then(response => {
                updateReportTable(response.reportData);
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    function updateReportTable(data) {
        const tbody = document.getElementById('reportTableBody');
        tbody.innerHTML = '';

        if (!data || data.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="9" class="no-data">
                        <div class="no-data-icon">📊</div>
                        <div>No sales data available for the selected period</div>
                    </td>
                </tr>`;
            return;
        }

        data.forEach(item => {
            const row = `
                <tr>
                    <td>${item.orderId}</td>
                    <td>${item.date}</td>
                    <td>${item.customer}</td>
                    <td>${item.products}</td>
                    <td>₹${item.amount}</td>
                    <td>₹${item.discount}</td>
                    <td>${item.coupon || '-'}</td>
                    <td>₹${item.netAmount}</td>
                    <td>${item.offerAmount}</td> 
                    <td>${item.paymentMethod}</td>
                </tr>`;
            tbody.innerHTML += row;
        });
    }

    fetchReport(); // Load default report on page load




    //=========================download pdf=========================

    async function exportToPDF() {
        const startDate = startDateInput.value;
        const endDate = endDateInput.value;

        const queryParams = new URLSearchParams({
            period: selectedPeriod,
            ...(selectedPeriod === 'custom' && { startDate, endDate })
        });

        try {
            const response = await fetch(`/admin/sales-report?${queryParams.toString()}`);
            const { reportData } = await response.json();

            if (!reportData || reportData.length === 0) {
                alert('No data to export.');
                return;
            }

            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();

            doc.text('Sales Report', 14, 15);

            const tableData = reportData.map(item => [
                item.orderId,
                item.date,
                item.customer,
                item.products,
                `${item.amount}`,
                `${item.discount}`,
                item.coupon || '-',
                `${item.netAmount}`,
                item.paymentMethod
            ]);

            doc.autoTable({
                startY: 20,
                head: [['Order ID', 'Date', 'Customer', 'Products', 'Amount', 'Discount', 'Coupon', 'Net Amount', 'Payment']],
                body: tableData,
                styles: { fontSize: 8 }
            });

            const fileName = `Sales_Report_${selectedPeriod}_${new Date().toISOString().split('T')[0]}.pdf`;
            doc.save(fileName);
        } catch (error) {
            console.error('PDF export error:', error);
            alert('Failed to export PDF.');
        }
    }

    //=================download excel


    async function exportToExcel() {
    const startDate = startDateInput.value;
    const endDate = endDateInput.value;

    const queryParams = new URLSearchParams({
        period: selectedPeriod,
        ...(selectedPeriod === 'custom' && { startDate, endDate })
    });

    try {
        const response = await fetch(`/admin/sales-report?${queryParams.toString()}`);
        const { reportData } = await response.json();

        if (!reportData || reportData.length === 0) {
            alert('No data to export.');
            return;
        }

        // Format data for Excel
        const worksheetData = reportData.map(item => ({
            'Order ID': item.orderId,
            'Date': item.date,
            'Customer': item.customer,
            'Products': item.products,
            'Amount': item.amount,
            'Discount': item.discount,
            'Coupon': item.coupon || '-',
            'Net Amount': item.netAmount,
            'Payment Method': item.paymentMethod
        }));

        const worksheet = XLSX.utils.json_to_sheet(worksheetData);
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, 'Sales Report');

        const fileName = `Sales_Report_${selectedPeriod}_${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(workbook, fileName);

    } catch (error) {
        console.error('Excel export error:', error);
        alert('Failed to export Excel.');
    }
}


</script> -->






<!-- <script>
    const periodButtons = document.querySelectorAll('.period-btn');
    const startDateInput = document.getElementById('startDate');
    const endDateInput = document.getElementById('endDate');

    let selectedPeriod = 'today';

    periodButtons.forEach(button => {
        button.addEventListener('click', () => {
            periodButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');

            selectedPeriod = button.dataset.period;

            const custom = selectedPeriod === 'custom';
            startDateInput.disabled = !custom;
            endDateInput.disabled = !custom;

            fetchReport();
        });
    });

    startDateInput.addEventListener('change', () => {
        if (selectedPeriod === 'custom') fetchReport();
    });

    endDateInput.addEventListener('change', () => {
        if (selectedPeriod === 'custom') fetchReport();
    });

    function fetchReport() {
        const startDate = startDateInput.value;
        const endDate = endDateInput.value;

        const queryParams = new URLSearchParams({
            period: selectedPeriod,
            ...(selectedPeriod === 'custom' && { startDate, endDate })
        });

        fetch(`/admin/sales-report?${queryParams.toString()}`)
            .then(res => res.json())
            .then(response => {
                updateReportTable(response.reportData);
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    function updateReportTable(data) {
        const tbody = document.getElementById('reportTableBody');
        tbody.innerHTML = '';

        if (!data || data.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="10" class="no-data">
                        <div class="no-data-icon">📊</div>
                        <div>No sales data available for the selected period</div>
                    </td>
                </tr>`;
            return;
        }

        data.forEach(item => {
            const row = `
                <tr>
                    <td>${item.orderId}</td>
                    <td>${item.date}</td>
                    <td>${item.customer}</td>
                    <td>${item.products}</td>
                    <td>₹${item.amount}</td>
                   
                    <td>₹${item.discount>=1?item.discount:0}</td>
                    <td>${item.coupon || '-'}</td>
                    <td>₹${item.netAmount}</td>
                  
                    <td>${item.paymentMethod}</td>
                </tr>`;
            tbody.innerHTML += row;
        });
    }

    fetchReport(); // Load default report on page load

    //=========================download pdf=========================

    async function exportToPDF() {
        const startDate = startDateInput.value;
        const endDate = endDateInput.value;

        const queryParams = new URLSearchParams({
            period: selectedPeriod,
            ...(selectedPeriod === 'custom' && { startDate, endDate })
        });

        try {
            const response = await fetch(`/admin/sales-report?${queryParams.toString()}`);
            const { reportData } = await response.json();

            if (!reportData || reportData.length === 0) {
                alert('No data to export.');
                return;
            }

            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();

            doc.text('Sales Report', 14, 15);

            const tableData = reportData.map(item => [
                item.orderId,
                item.date,
                item.customer,
                item.products,
                `${item.amount}`,
                `${item.discount>=1?item.discount:0}`,
                item.coupon || '-',
                `${item.netAmount}`,
                `${item.offerAmount}`,
                item.paymentMethod
            ]);

            doc.autoTable({
                startY: 20,
                head: [['Order ID', 'Date', 'Customer', 'Products', 'Amount', 'Discount', 'Coupon', 'Net Amount', 'Offer Amount', 'Payment']],
                body: tableData,
                styles: { fontSize: 8 }
            });

            const fileName = `Sales_Report_${selectedPeriod}_${new Date().toISOString().split('T')[0]}.pdf`;
            doc.save(fileName);
        } catch (error) {
            console.error('PDF export error:', error);
            alert('Failed to export PDF.');
        }
    }

    //=================download excel=========================

    async function exportToExcel() {
        const startDate = startDateInput.value;
        const endDate = endDateInput.value;

        const queryParams = new URLSearchParams({
            period: selectedPeriod,
            ...(selectedPeriod === 'custom' && { startDate, endDate })
        });

        try {
            const response = await fetch(`/admin/sales-report?${queryParams.toString()}`);
            const { reportData } = await response.json();

            if (!reportData || reportData.length === 0) {
                alert('No data to export.');
                return;
            }

            const worksheetData = reportData.map(item => ({
                'Order ID': item.orderId,
                'Date': item.date,
                'Customer': item.customer,
                'Products': item.products,
                'Amount': item.amount,
                'Discount': item.discount>=1?item.discount:0,
                'Coupon': item.coupon || '-',
                'Net Amount': item.netAmount,
                'Offer Amount': item.offerAmount,
                'Payment Method': item.paymentMethod
            }));

            const worksheet = XLSX.utils.json_to_sheet(worksheetData);
            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Sales Report');

            const fileName = `Sales_Report_${selectedPeriod}_${new Date().toISOString().split('T')[0]}.xlsx`;
            XLSX.writeFile(workbook, fileName);

        } catch (error) {
            console.error('Excel export error:', error);
            alert('Failed to export Excel.');
        }
    }
</script> 
 -->





 <script>
    const periodButtons = document.querySelectorAll('.period-btn');
    const startDateInput = document.getElementById('startDate');
    const endDateInput = document.getElementById('endDate');

    let selectedPeriod = 'today';

    periodButtons.forEach(button => {
        button.addEventListener('click', () => {
            periodButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');

            selectedPeriod = button.dataset.period;

            const custom = selectedPeriod === 'custom';
            startDateInput.disabled = !custom;
            endDateInput.disabled = !custom;

            fetchReport();
        });
    });

    startDateInput.addEventListener('change', () => {
        if (selectedPeriod === 'custom') fetchReport();
    });

    endDateInput.addEventListener('change', () => {
        if (selectedPeriod === 'custom') fetchReport();
    });

    function fetchReport() {
        const startDate = startDateInput.value;
        const endDate = endDateInput.value;

        const queryParams = new URLSearchParams({
            period: selectedPeriod,
            ...(selectedPeriod === 'custom' && { startDate, endDate })
        });

        fetch(`/admin/sales-summary?${queryParams.toString()}`)
            .then(res => res.json())
            .then(response => {
                updateReportTable(response.reportData);
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    function updateReportTable(data) {
        const tbody = document.getElementById('reportTableBody');
        tbody.innerHTML = '';

        if (!data || data.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="10" class="no-data">
                        <div class="no-data-icon">📊</div>
                        <div>No sales data available for the selected period</div>
                    </td>
                </tr>`;
            return;
        }

        data.forEach(item => {
            const row = `
                <tr>
                    <td>${item.orderId}</td>
                    <td>${item.date}</td>
                    <td>${item.customer}</td>
                    <td>${item.products}</td>
                    <td>₹${item.amount}</td>
                    <td>₹${item.discount >= 1 ? item.discount : 0}</td>
                   
                    <td>${item.paymentMethod}</td>
                </tr>`;
            tbody.innerHTML += row;
        });
    }

    fetchReport(); // Load default report on page load

    //=========================download pdf=========================

    async function exportToPDF() {
        const startDate = startDateInput.value;
        const endDate = endDateInput.value;

        const queryParams = new URLSearchParams({
            period: selectedPeriod,
            ...(selectedPeriod === 'custom' && { startDate, endDate })
        });

        try {
            const response = await fetch(`/admin/sales-summary?${queryParams.toString()}`);
            const { reportData } = await response.json();

            if (!reportData || reportData.length === 0) {
                alert('No data to export.');
                return;
            }

            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();

            doc.text('Sales Report', 14, 15);

            const tableData = reportData.map(item => [
                item.orderId,
                item.date,
                item.customer,
                item.products,
                `${item.amount}`,
                `${item.discount >= 1 ? item.discount : 0}`,
                
                item.paymentMethod
            ]);

            doc.autoTable({
                startY: 20,
                head: [['Order ID', 'Date', 'Customer', 'Products', 'Amount', 'Discount',  'Payment']],
                body: tableData,
                styles: { fontSize: 8 }
            });

            const fileName = `Sales_Report_${selectedPeriod}_${new Date().toISOString().split('T')[0]}.pdf`;
            doc.save(fileName);
        } catch (error) {
            console.error('PDF export error:', error);
            alert('Failed to export PDF.');
        }
    }

    //=================download excel=========================

    async function exportToExcel() {
        const startDate = startDateInput.value;
        const endDate = endDateInput.value;

        const queryParams = new URLSearchParams({
            period: selectedPeriod,
            ...(selectedPeriod === 'custom' && { startDate, endDate })
        });

        try {
            const response = await fetch(`/admin/sales-summary?${queryParams.toString()}`);
            const { reportData } = await response.json();

            if (!reportData || reportData.length === 0) {
                alert('No data to export.');
                return;
            }

            const worksheetData = reportData.map(item => ({
                'Order ID': item.orderId,
                'Date': item.date,
                'Customer': item.customer,
                'Products': item.products,
                'Amount': item.amount,
                'Discount': item.discount >= 1 ? item.discount : 0,
                
                'Payment Method': item.paymentMethod
            }));

            const worksheet = XLSX.utils.json_to_sheet(worksheetData);
            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Sales Report');

            const fileName = `Sales_Report_${selectedPeriod}_${new Date().toISOString().split('T')[0]}.xlsx`;
            XLSX.writeFile(workbook, fileName);

        } catch (error) {
            console.error('Excel export error:', error);
            alert('Failed to export Excel.');
        }
    }
</script>






</body>
</html>
        <%- include('partials/admin/footer.ejs')  %>
    </main>
    <%- include('partials/admin/scriptTags.ejs') %>
</body>

</html>


