<!DOCTYPE HTML>
<html lang="en">

<%-include('partials/admin/headTag.ejs') %>

  <body>
    <div class="screen-overlay"></div>
    <%- include('partials/admin/navBar.ejs') %>
      <main class="main-wrap">
        <%- include('partials/admin/header.ejs') %>

          <!-- Add these before the closing </body> tag but after jQuery -->
          <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">
          <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>

          <div class="container-fluid py-4">
            <div class="row">
              <div class="col-12">
                <div class="card bg-white shadow-sm border-0 mb-4">
                  <div class="card-header bg-gradient-brown d-flex justify-content-between align-items-center">
                    <h4 class="text-white mb-0">Add New Book</h4>
                    <a href="/admin/products" class="btn btn-light">
                      <i class="fas fa-arrow-left me-2"></i>Back to Books
                    </a>
                  </div>
                  <div class="card-body p-4">
                    <form id="addProductForm" action="/admin/edit-product/<%=product._id%>" method="POST"
                      enctype="multipart/form-data" novalidate>
                      <div class="row mb-4">
                        <div class="col-md-6">
                          <div class="card border-0 shadow-sm h-100">
                            <div class="card-header bg-light-brown">
                              <h5 class="text-brown mb-0">Book Information</h5>
                            </div>
                            <div class="card-body">
                              <div class="mb-3">
                                <label for="productName" class="form-label">Title <span
                                    class="text-danger">*</span></label>
                                <input type="text" value="<%=product.productTitle%>" class="form-control"
                                  id="productName" name="name" required placeholder="E.g., The Great Gatsby">
                              </div>

                              <div class="mb-3">
                                <label for="writer" class="form-label">Writer <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="writer" value="<%=product.authorName%>"
                                  name="writer" required placeholder="E.g., F. Scott Fitzgerald">
                              </div>

                              <div class="mb-3">
                                <label for="productCategory" class="form-label">Category <span
                                    class="text-danger">*</span></label>
                                <select class="form-select" id="productCategory" name="category_id" required>
                                  <option value="" disabled selected>Select category</option>
                                  <% if (categories && categories.length> 0) { %>
                                    <% categories.forEach(category=> { %>
                                      <option value="<%= category._id %>">
                                        <%= category.name %>
                                      </option>
                                      <% }) %>

                                        <% } else { %>
                                          <option value="">Categories not fetched</option>
                                          <% } %>
                                </select>
                              </div>

                              <div class="mb-3">
                                <label for="language" class="form-label">Language <span
                                    class="text-danger">*</span></label>
                                <select class="form-select" id="language" name="language" required>
                                  <option value="" disabled selected>Select language</option>
                                  <option value="English">English</option>
                                  <option value="Malayalam">Malayalam</option>
                                  <option value="Hindi">Hindi</option>
                                  <option value="Tamil">Tamil</option>
                                </select>
                              </div>

                              <div class="row">
                                <div class="col-md-6 mb-3">
                                  <label for="regularPrice" class="form-label">Regula Price<span
                                      class="text-danger">*</span></label>
                                  <input type="number" step="0.01" min="0" class="form-control" id="regularPrice"
                                    name="regularPrice" value="<%=product.regularPrice%>" required>
                                </div>
                                <div class="col-md-6 mb-3">
                                  <label for="salePrice" class="form-label">Sale Price (&#8377)</label>
                                  <input type="number" step="0.01" min="0" class="form-control" id="salePrice"
                                    name="salePrice" placeholder="Optional">
                                </div>
                              </div>

                              <div class="mb-3">
                                <label for="availableQuantity" class="form-label">Available Quantity <span
                                    class="text-danger">*</span></label>
                                <input type="number" value="<%=product.quantity%>" min="0" class="form-control"
                                  id="availableQuantity" name="availableQuantity" required>
                              </div>

                              <div class="mb-3">
                                <label for="productDescription" class="form-label">Description <span
                                    class="text-danger">*</span></label>
                                <textarea class="form-control" id="productDescription" name="description" rows="5"
                                  required placeholder="Short summary of the book"><%=product.description%></textarea>
                              </div>
                            </div>
                          </div>
                        </div>

                        <div class="col-md-6">
                          <div class="card border-0 shadow-sm h-100">
                            <div class="card-header bg-light-brown">
                              <h5 class="text-brown mb-0">Book Images & Additional Details</h5>
                            </div>
                            <div class="card-body">
                              <div class="mb-4">
                                <label class="form-label d-block">Upload Images <span class="text-danger">*</span>
                                  <small class="text-muted">(Minimum 3 required)</small></label>
                                <div class="image-upload-container">
                                  <div class="image-preview-area d-flex flex-wrap mb-3" id="imagePreviewArea">
                                    <div
                                      class="upload-placeholder d-flex align-items-center justify-content-center bg-light-brown rounded p-3 mb-2">
                                      <div class="text-center">
                                        <i class="fas fa-cloud-upload-alt fa-2x text-brown mb-2"></i>
                                        <p class="mb-0 small">Click to select at least 3 images</p>
                                      </div>
                                    </div>
                                  </div>

                                  <div class="existing-images-container d-flex flex-wrap mb-3">
                                    <% if (product.productImage && product.productImage.length> 0) { %>
                                      <% product.productImage.slice().reverse().forEach((image, index)=> { %>
                                        <div class="image-box me-2 mb-2"
                                          id="existing-image-<%= product.productImage.length - 1 - index %>"
                                          style="width: 80px; height: 80px; position: relative;">
                                          <img src="<%= image %>"
                                            alt="Product Image <%= product.productImage.length - index %>"
                                            style="width: 100%; height: 100%; object-fit: cover; border-radius: 4px;">
                                          <!-- Cancel/Remove Icon -->
                                          <span
                                            onclick="cancelExistingImage('<%= image %>', <%= product.productImage.length - 1 - index %>)"
                                            style="position: absolute; top: -5px; right: -5px; background: #dc3545; color: #fff; font-size: 12px; width: 16px; height: 16px; display: flex; align-items: center; justify-content: center; border-radius: 50%; cursor: pointer;">
                                            âœ–
                                          </span>
                                        </div>
                                        <% }) %>
                                          <% } else { %>
                                            <p>No existing images available.</p>
                                            <% } %>
                                  </div>
                                  <div class="input-group mb-3">

                                    <input type="file" class="form-control" id="productImages" name="productImages"
                                      accept="image/*" multiple>

                                    <label class="input-group-text bg-brown text-white"
                                      for="productImages">Browse</label>
                                  </div>
                                  <div class="alert alert-light-brown border-0 d-flex align-items-start" role="alert">
                                    <i class="fas fa-info-circle me-2 text-brown mt-1"></i>
                                    <div class="small text-muted">
                                      <strong>Image Requirements:</strong>
                                      <ul class="ps-3 mb-0 mt-1">
                                        <li>Minimum 3 high-quality images</li>
                                        <li>Include the book cover and other angles</li>
                                        <li>Recommended size: 800x800px (square)</li>
                                        <li>Maximum file size: 5MB per image</li>
                                      </ul>
                                    </div>
                                  </div>
                                </div>
                              </div>

                              <div class="row">
                                <div class="col-md-12 mb-3">
                                  <label for="publishedDate" class="form-label">Publication Date</label>
                                  <input type="date" class="form-control" id="publishedDate" name="publishedDate">
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>

                      <!-- CropperJS Modal -->
                      <div class="modal fade" id="imageCropperModal" tabindex="-1"
                        aria-labelledby="imageCropperModalLabel" aria-hidden="true" data-bs-backdrop="static">
                        <div class="modal-dialog modal-lg">
                          <div class="modal-content">
                            <div class="modal-header bg-gradient-brown">
                              <h5 class="modal-title text-white" id="imageCropperModalLabel">Crop Image <span
                                  id="currentImageNumber"></span></h5>
                              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
                                id="closeModal"></button>
                            </div>
                            <div class="modal-body">
                              <div class="img-container mb-3" style="max-height: 400px;">
                                <img id="cropperImage" src="" alt="Image to crop" style="max-width: 100%;">
                              </div>
                              <div class="progress mb-3" style="height: 10px;">
                                <div id="cropProgress" class="progress-bar bg-brown" role="progressbar"
                                  style="width: 0%"></div>
                              </div>
                              <div class="alert alert-light-brown border-0" role="alert">
                                <i class="fas fa-info-circle me-2 text-brown"></i>
                                <span class="text-muted">Drag and resize the crop box to select the book image area you
                                  want to keep. Images will be cropped to a square format for consistency.</span>
                              </div>
                            </div>
                            <div class="modal-footer">
                              <button type="button" class="btn btn-secondary" id="cancelBtn">Cancel</button>
                              <button type="button" class="btn btn-brown" id="cropImageBtn">
                                <i class="fas fa-crop-alt me-2"></i>Crop & Continue
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>

                      <div class="d-flex justify-content-between">
                        <a href="/admin/edit-product" class="btn btn-secondary">
                          <i class="fas fa-times me-2"></i>Cancel
                        </a>
                        <button type="submit" class="btn btn-brown" id="saveBookBtn">
                          <i class="fas fa-save me-2"></i>Save Book
                        </button>
                      </div>
                    </form>
                  </div>
                </div>
              </div>
            </div>
          </div>


          <style>
            :root {
              --brown-100: #f5f0e8;
              --brown-200: #e6d7c3;
              --brown-300: #d4bea2;
              --brown-400: #c1a68c;
              --brown-500: #b08d6c;
              --brown-600: #9a7b5f;
              --brown-700: #846a51;
              --brown-800: #6b5440;
              --brown-900: #524030;
            }

            .bg-brown {
              background-color: var(--brown-600) !important;
            }

            .bg-light-brown {
              background-color: var(--brown-100) !important;
            }

            .bg-gradient-brown {
              background: linear-gradient(to right, var(--brown-700), var(--brown-500)) !important;
            }

            .text-brown {
              color: var(--brown-700) !important;
            }

            .btn-brown {
              background-color: var(--brown-600);
              color: white;
            }

            .btn-brown:hover {
              background-color: var(--brown-700);
              color: white;
            }

            .btn-outline-brown {
              border-color: var(--brown-600);
              color: var(--brown-600);
            }

            .btn-outline-brown:hover {
              background-color: var(--brown-600);
              color: white;
            }

            .card {
              margin-top: 10px;
              border-radius: 10px;
              overflow: hidden;
              transition: all 0.3s ease;
            }

            .card:hover {
              box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1) !important;
            }

            .card-header {
              padding: 1rem 1.5rem;
            }

            .upload-placeholder {
              width: 100%;
              height: 120px;
              border: 2px dashed var(--brown-300);
              border-radius: 8px;
              cursor: pointer;
            }

            .image-preview-item {
              width: 100px;
              height: 100px;
              border-radius: 8px;
              object-fit: cover;
              margin-right: 10px;
              margin-bottom: 10px;
              border: 3px solid var(--brown-100);
              transition: all 0.2s ease;
            }

            .image-preview-item:hover {
              transform: scale(1.05);
              border-color: var(--brown-300);
            }

            .image-preview-remove {
              position: absolute;
              top: -8px;
              right: -8px;
              background: var(--brown-600);
              color: white;
              border-radius: 50%;
              width: 24px;
              height: 24px;
              display: flex;
              align-items: center;
              justify-content: center;
              cursor: pointer;
              box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
              transition: all 0.2s ease;
            }

            .image-preview-remove:hover {
              background: #dc3545;
              transform: scale(1.1);
            }

            .alert-light-brown {
              background-color: var(--brown-100);
              border-color: var(--brown-200);
              color: var(--brown-800);
            }

            .cropper-container {
              max-width: 100%;
            }

            .img-container {
              background-color: #f8f9fa;
              width: 100%;
              text-align: center;
            }

            .cropper-view-box,
            .cropper-face {
              border-radius: 0;
            }

            .cropper-line,
            .cropper-point {
              background-color: var(--brown-600) !important;
            }

            /* Loading animation */
            .loading-overlay {
              position: fixed;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              background: rgba(255, 255, 255, 0.8);
              display: flex;
              align-items: center;
              justify-content: center;
              z-index: 9999;
              flex-direction: column;
            }

            .spinner {
              width: 40px;
              height: 40px;
              border: 4px solid rgba(0, 0, 0, 0.1);
              border-radius: 50%;
              border-top-color: var(--brown-600);
              animation: spin 1s ease-in-out infinite;
            }

            @keyframes spin {
              to {
                transform: rotate(360deg);
              }
            }

            /* Form enhancements */
            .form-control:focus,
            .form-select:focus {
              border-color: var(--brown-400);
              box-shadow: 0 0 0 0.25rem rgba(176, 141, 108, 0.25);
            }

            textarea {
              resize: vertical;
            }
          </style>


          <script>

            // Define variables for cropping
            let cropper;
            let currentFileIndex;
            let selectedFiles = [];
            let croppedImages = [];
            let cropperModal;

            document.addEventListener('DOMContentLoaded', function () {
              // Initialize modal
              cropperModal = new bootstrap.Modal(document.getElementById('imageCropperModal'));

              // Set up click on upload placeholder
              document.querySelector('.upload-placeholder').addEventListener('click', function () {
                document.getElementById('productImages').click();
              });

              // Image input change handler
              document.getElementById('productImages').addEventListener('change', function (event) {
                // Get the newly selected files
                const newFiles = Array.from(this.files);

                // Add new files to the selected files array
                selectedFiles = [...newFiles];

                // Check if we have enough images
                if (selectedFiles.length < 3 && croppedImages.length < 3) {
                  const totalImages = selectedFiles.length + croppedImages.length;
                  const remaining = 3 - totalImages;
                  if (remaining > 0) {
                    Swal.fire({
                      icon: 'warning',
                      title: 'Incomplete Selection',
                      text: `Please select ${remaining} more image${remaining > 1 ? 's' : ''}. Total images should be at least 3.`,
                      confirmButtonText: 'OK'
                    });

                  }
                }

                // Start cropping process with the new files
                currentFileIndex = 0;
                startCropping();
              });

              // Cancel button event
              document.getElementById('cancelBtn').addEventListener('click', function () {
                // if (confirm('Are you sure you want to cancel image cropping? You will need to select images again.')) {
                //   cropperModal.hide();
                //   if (cropper) {
                //     cropper.destroy();
                //     cropper = null;
                //   }
                //   document.getElementById('productImages').value = '';
                //   selectedFiles = [];

                //   // Only reset cropped images if there are no images processed yet
                //   if (croppedImages.length === 0) {
                //     resetPreviewArea();
                //   } else {
                //     displayCroppedImages(); // Redisplay existing cropped images
                //   }
                // }
                Swal.fire({
                  title: 'Cancel Image Cropping?',
                  text: 'Are you sure you want to cancel image cropping? You will need to select images again.',
                  icon: 'warning',
                  showCancelButton: true,
                  confirmButtonText: 'Yes, Cancel',
                  cancelButtonText: 'No, Keep Editing'
                }).then((result) => {
                  if (result.isConfirmed) {
                    cropperModal.hide();
                    if (cropper) {
                      cropper.destroy();
                      cropper = null;
                    }
                    document.getElementById('productImages').value = '';
                    selectedFiles = [];

                    // Only reset cropped images if there are no images processed yet
                    if (croppedImages.length === 0) {
                      resetPreviewArea();
                    } else {
                      displayCroppedImages(); // Redisplay existing cropped images
                    }
                  }
                });

              });

              // Close modal button
              document.getElementById('closeModal').addEventListener('click', function () {
                document.getElementById('cancelBtn').click(); // Trigger cancel button
              });

              // Crop and continue button
              document.getElementById('cropImageBtn').addEventListener('click', function () {
                if (!cropper) return;

                const canvas = cropper.getCroppedCanvas({
                  width: 800,
                  height: 800,
                  imageSmoothingQuality: 'high'
                });

                // Get the cropped image as a data URL
                const croppedDataUrl = canvas.toDataURL('image/jpeg');

                // Save this cropped image
                croppedImages.push({
                  dataUrl: croppedDataUrl,
                  filename: selectedFiles[currentFileIndex].name
                });

                // Update progress bar
                updateProgress();

                // Destroy current cropper instance
                if (cropper) {
                  cropper.destroy();
                  cropper = null;
                }

                // Move to next image
                currentFileIndex++;

                // Check if we have more images to process
                if (currentFileIndex < selectedFiles.length) {
                  // Process next image
                  processNextImage();
                } else {
                  // All images processed, hide modal and display them
                  cropperModal.hide();
                  displayCroppedImages();
                }
              });

              // Form submission
              document.getElementById('addProductForm').addEventListener('submit', function (e) {
                e.preventDefault();

                // if (croppedImages.length < 3) {
                //   alert('Please upload and crop at least 3 book images');
                //   return false;
                // }

                // Show loading overlay
                showLoading('Saving book...');

                // Convert cropped images to Blob files and append to FormData
                const formData = new FormData(this);

                // Remove the original file input images
                formData.delete('productImages');

                // Create promises for all blob conversions
                const blobPromises = croppedImages.map((image, index) => {
                  return fetch(image.dataUrl)
                    .then(res => res.blob())
                    .then(blob => {
                      const filename = `book-image-${index + 1}-${Date.now()}.jpg`;
                      return new File([blob], filename, { type: 'image/jpeg' });
                    });
                });

                // When all blobs are ready, add them to formData and submit
                Promise.all(blobPromises)
                  .then(files => {
                    files.forEach(file => {
                      formData.append('productImages', file);
                    });
                    return submitFormWithFormData(formData);
                  })
                  .catch(error => {
                    hideLoading();
                    console.error('Error:', error);
                    Swal.fire({
                      icon: "info",
                      title: "No Changes Detected",
                      text: "You didn't update anything!",
                      confirmButtonText: "OK",
                    });
                  });
              });
            });

            function startCropping() {
              // Start the cropping process with the first image
              if (selectedFiles.length > 0) {
                processNextImage();
              }
            }

            function processNextImage() {
              if (currentFileIndex >= selectedFiles.length) {
                // All images processed, display them
                displayCroppedImages();
                return;
              }

              const file = selectedFiles[currentFileIndex];

              if (!file.type.match('image.*')) {
                currentFileIndex++;
                processNextImage();
                return;
              }

              // Update the modal title to show progress
              document.getElementById('currentImageNumber').textContent =
                ` (${currentFileIndex + 1} of ${selectedFiles.length})`;

              // Update progress bar
              updateProgress();

              const reader = new FileReader();
              reader.onload = function (e) {
                // Set the image in the cropper
                const cropperImage = document.getElementById('cropperImage');
                cropperImage.src = e.target.result;

                // Show the modal
                cropperModal.show();

                // Initialize cropper after modal is shown
                setTimeout(() => {
                  // Initialize cropper
                  cropper = new Cropper(cropperImage, {
                    aspectRatio: 0, // Square aspect ratio for book images
                    viewMode: 2,    // Restrict the crop box to not exceed the size of the canvas
                    // autoCropArea: 0.8,
                    // responsive: true,
                    // guides: true,
                    // center: true,
                    highlight: false,
                    cropBoxMovable: true,
                    cropBoxResizable: true,
                    toggleDragModeOnDblclick: false
                  });
                }, 300);
              };

              reader.readAsDataURL(file);
            }

            function updateProgress() {
              const progressBar = document.getElementById('cropProgress');
              const percentage = ((currentFileIndex) / selectedFiles.length) * 100;
              progressBar.style.width = percentage + '%';
              progressBar.setAttribute('aria-valuenow', percentage);
            }

            function displayCroppedImages() {
              const previewArea = document.getElementById('imagePreviewArea');
              previewArea.innerHTML = ''; // Clear existing previews

              croppedImages.forEach((image, index) => {
                const previewItem = document.createElement('div');
                previewItem.className = 'position-relative me-2 mb-2';
                previewItem.innerHTML = `
                      <img src="${image.dataUrl}" class="image-preview-item shadow" data-index="${index}" title="Book image ${index + 1}">
                      <div class="image-preview-remove" onclick="removePreview(${index})">
                        <i class="fas fa-times fa-xs"></i>
                      </div>
                    `;
                previewArea.appendChild(previewItem);
              });

              // Add upload more button if needed
              const uploadMoreBtn = document.createElement('div');
              uploadMoreBtn.className = 'image-preview-item d-flex align-items-center justify-content-center bg-light-brown me-2 mb-2';
              uploadMoreBtn.style.cursor = 'pointer';
              uploadMoreBtn.innerHTML = '<i class="fas fa-plus text-brown"></i>';
              uploadMoreBtn.addEventListener('click', function () {
                document.getElementById('productImages').click();
              });
              previewArea.appendChild(uploadMoreBtn);
            }

            function resetPreviewArea() {    //ivide our backtick undaayirunnu
              const previewArea = document.getElementById('imagePreviewArea');
              previewArea.innerHTML = `
                    <div class="upload-placeholder d-flex align-items-center justify-content-center bg-light-brown rounded p-3 mb-2">
                      <div class="text-center">
                        <i class="fas fa-cloud-upload-alt fa-2x text-brown mb-2"></i>
                        <p class="mb-0 small">Click to select at least 3 images</p>
                      </div>
                    </div>
                 ` ;
            }

            function removePreview(index) {
              croppedImages.splice(index, 1);
              displayCroppedImages();

              // If no images left, show the upload placeholder
              if (croppedImages.length === 0) {
                resetPreviewArea();
              }
            }

            function submitFormWithFormData(formData) {
              const actionUrl = document.getElementById('addProductForm').action;
              return fetch(actionUrl, {
                method: 'POST',
                body: formData
              })

                .then(response => {
                  console.log(response)
                  hideLoading();
                  if (response.ok) {
                    Swal.fire({
                      title: 'Success',
                      icon: 'success',
                      text: 'Product updated successfully'
                    })
                    setTimeout(() => {
                      window.location.reload();

                    }, 2000)
                  } else {
                    // throw new Error('Server error');
                    Swal.fire({
                      icon: "info",
                      title: "No Changes Detected",
                      text: "You didn't update anything!",
                      confirmButtonText: "OK",
                    });
                  }
                })
                .catch(error => {
                  hideLoading();
                  console.error('line number 712:', error);
                  Swal.fire({
                    icon: "info",
                    title: "No Changes Detected",
                    text: "You didn't update anything!",
                    confirmButtonText: "OK",
                  });
                });
            }

            function showLoading(message) {
              // Create loading overlay
              const overlay = document.createElement('div');
              overlay.className = 'loading-overlay';
              overlay.innerHTML = `
                    <div class="spinner mb-3"></div>
                    <p class="text-brown">${message || 'Processing...'}</p>
                  `;
              document.body.appendChild(overlay);
            }

            function hideLoading() {
              const overlay = document.querySelector('.loading-overlay');
              if (overlay) {
                overlay.remove();
              }
            }

            // Make removePreview globally accessible for the onclick handler
            window.removePreview = removePreview;

          </script>

          <script>


            function cancelExistingImage(imageUrl, index) {
              Swal.fire({
                title: 'Are you sure?',
                text: "Do you want to remove this image?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, remove it!',
                cancelButtonText: 'Cancel'
              }).then((result) => {
                if (result.isConfirmed) {

                  const imageDiv = document.getElementById("existing-image-" + index);
                  if (imageDiv) {
                    imageDiv.remove();
                  }

                  const hiddenInput = document.getElementById("imagesToDelete");
                  let imagesToDelete = [];
                  try {
                    imagesToDelete = JSON.parse(hiddenInput.value);
                  } catch (e) {
                    imagesToDelete = [];
                  }
                  imagesToDelete.push(imageUrl);
                  hiddenInput.value = JSON.stringify(imagesToDelete);

                  Swal.fire(
                    'Removed!',
                    'The image has been removed.',
                    'success'
                  );
                }
              });
            }

          </script>



          <%- include('partials/admin/footer.ejs') %>
      </main>
      <%- include('partials/admin/scriptTags.ejs') %>
  </body>

</html>