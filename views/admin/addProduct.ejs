<!DOCTYPE HTML>
<html lang="en">

<%-include('partials/admin/headTag.ejs') %>

    <body>
        <div class="screen-overlay"></div>
        <%- include('partials/admin/navBar.ejs') %>
            <main class="main-wrap">
                <%- include('partials/admin/header.ejs') %>           

                <!-- Add these before the closing </body> tag but after jQuery -->
                <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">
                <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
                
                <div class="container-fluid py-4">
                  <div class="row">
                    <div class="col-12">
                      <div class="card bg-white shadow-sm border-0 mb-4">
                        <div class="card-header bg-gradient-brown d-flex justify-content-between align-items-center">
                          <h4 class="text-white mb-0">Add New Book</h4>
                          <a href="/admin/products" class="btn btn-light">
                            <i class="fas fa-arrow-left me-2"></i>Back to Books
                          </a>
                        </div>
                        <div class="card-body p-4">
                          <form id="addProductForm" action="/admin/addProducts" method="POST" enctype="multipart/form-data" novalidate>
                            <div class="row mb-4">
                              <div class="col-md-6">
                                <div class="card border-0 shadow-sm h-100">
                                  <div class="card-header bg-light-brown">
                                    <h5 class="text-brown mb-0">Book Information</h5>
                                  </div>
                                  <div class="card-body">
                                    <div class="mb-3">
                                      <label for="productName" class="form-label">Title <span class="text-danger">*</span></label>
                                      <input type="text" class="form-control" id="productName" name="name" required placeholder="E.g., The Great Gatsby">
                                    </div>
                                    
                                    <div class="mb-3">
                                      <label for="writer" class="form-label">Writer <span class="text-danger">*</span></label>
                                      <input type="text" class="form-control" id="writer" name="writer" required placeholder="E.g., F. Scott Fitzgerald">
                                    </div>
                                    
                                    <div class="mb-3">
                                      <label for="productCategory" class="form-label">Category <span class="text-danger">*</span></label>
                                      <select class="form-select" id="productCategory" name="category_id" required>
                                        <option value="" disabled selected>Select category</option>
                                        <% if (categories && categories.length > 0) { %>
                                          <% categories.forEach(category => { %>
                  <option value="<%= category._id %>"><%= category.name %></option>
                <% }) %>
                
                                        <% } else { %>
                                          <option value="">Categories not fetched</option>
                                        <% } %>
                                      </select>
                                    </div>
                                    
                                    <div class="mb-3">
                                      <label for="language" class="form-label">Language <span class="text-danger">*</span></label>
                                      <select class="form-select" id="language" name="language" required>
                                        <option value="" disabled selected>Select language</option>
                                        <option value="English">English</option>
                                        <option value="Malayalam">Malayalam</option>
                                        <option value="Hindi">Hindi</option>
                                        <option value="Tamil">Tamil</option>
                                      </select>
                                    </div>
                                    
                                    <div class="row">
                                      <div class="col-md-6 mb-3">
                                        <label for="regularPrice" class="form-label">Regular Price (&#8377) <span class="text-danger">*</span></label>
                                        <input type="number" step="0.01" min="0" class="form-control" id="regularPrice" name="regularPrice" required>
                                      </div>
                                      <div class="col-md-6 mb-3">
                                        <label for="salePrice" class="form-label">Offer (&#8377)</label>
                                        <input type="number" step="0.01" min="0" class="form-control" id="salePrice" name="offerPrice" placeholder="Optional">
                                      </div>
                                    </div>
                                    
                                    <div class="mb-3">
                                      <label for="availableQuantity" class="form-label">Available Quantity <span class="text-danger">*</span></label>
                                      <input type="number" min="0" class="form-control" id="availableQuantity" name="availableQuantity" required>
                                    </div>
                                  
                                    <div class="mb-3">
                                      <label for="productDescription" class="form-label">Description <span class="text-danger">*</span></label>
                                      <textarea class="form-control" id="productDescription" name="description" rows="5" required placeholder="Short summary of the book"></textarea>
                                    </div>
                                  </div>
                                </div>
                              </div>
                              
                              <div class="col-md-6">
                                <div class="card border-0 shadow-sm h-100">
                                  <div class="card-header bg-light-brown">
                                    <h5 class="text-brown mb-0">Book Images & Additional Details</h5>
                                  </div>
                                  <div class="card-body">
                                    <div class="mb-4">
                                      <label class="form-label d-block">Upload Images <span class="text-danger">*</span> <small class="text-muted">(Minimum 3 required)</small></label>
                                      <div class="image-upload-container">
                                        <div class="image-preview-area d-flex flex-wrap mb-3" id="imagePreviewArea">
                                          <div class="upload-placeholder d-flex align-items-center justify-content-center bg-light-brown rounded p-3 mb-2">
                                            <div class="text-center">
                                              <i class="fas fa-cloud-upload-alt fa-2x text-brown mb-2"></i>
                                              <p class="mb-0 small">Click to select at least 3 images</p>
                                            </div>
                                          </div>
                                        </div>
                                        <div class="input-group mb-3">
                
                                          <input type="file" class="form-control" id="productImages" name="productImages" accept="image/*" multiple>
                                          
                                          <label class="input-group-text bg-brown text-white" for="productImages">Browse</label>
                                        </div>
                                        <div class="alert alert-light-brown border-0 d-flex align-items-start" role="alert">
                                          <i class="fas fa-info-circle me-2 text-brown mt-1"></i>
                                          <div class="small text-muted">
                                            <strong>Image Requirements:</strong>
                                            <ul class="ps-3 mb-0 mt-1">
                                              <li>Minimum 3 high-quality images</li>
                                              <li>Include the book cover and other angles</li>
                                              <li>Recommended size: 800x800px (square)</li>
                                              <li>Maximum file size: 5MB per image</li>
                                            </ul>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                    
                                    <div class="row">
                                      <div class="col-md-12 mb-3">
                                        <label for="publishedDate" class="form-label">Publication Date</label>
                                        <input type="date" class="form-control" id="publishedDate" name="publishedDate">
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                
                            <!-- CropperJS Modal -->
                            <div class="modal fade" id="imageCropperModal" tabindex="-1" aria-labelledby="imageCropperModalLabel" aria-hidden="true" data-bs-backdrop="static">
                              <div class="modal-dialog modal-lg">
                                <div class="modal-content">
                                  <div class="modal-header bg-gradient-brown">
                                    <h5 class="modal-title text-white" id="imageCropperModalLabel">Crop Image <span id="currentImageNumber"></span></h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="closeModal"></button>
                                  </div>
                                  <div class="modal-body">
                                    <div class="img-container mb-3" style="max-height: 400px;">
                                      <img id="cropperImage" src="" alt="Image to crop" style="max-width: 100%;">
                                    </div>
                                    <div class="progress mb-3" style="height: 10px;">
                                      <div id="cropProgress" class="progress-bar bg-brown" role="progressbar" style="width: 0%"></div>
                                    </div>
                                    <div class="alert alert-light-brown border-0" role="alert">
                                      <i class="fas fa-info-circle me-2 text-brown"></i>
                                      <span class="text-muted">Drag and resize the crop box to select the book image area you want to keep. Images will be cropped to a square format for consistency.</span>
                                    </div>
                                  </div>
                                  <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" id="cancelBtn">Cancel</button>
                                    <button type="button" class="btn btn-brown" id="cropImageBtn">
                                      <i class="fas fa-crop-alt me-2"></i>Crop & Continue
                                    </button>
                                  </div>
                                </div>
                              </div>
                            </div>
                            
                            <div class="d-flex justify-content-between">
                              <a href="/admin/products" class="btn btn-secondary">
                                <i class="fas fa-times me-2"></i>Cancel
                              </a>
                              <button type="submit" class="btn btn-brown" id="saveBookBtn">
                                <i class="fas fa-save me-2"></i>Save Book
                              </button>
                            </div>
                          </form>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                
                
                <style>
                  :root {
                    --brown-100: #f5f0e8;
                    --brown-200: #e6d7c3;
                    --brown-300: #d4bea2;
                    --brown-400: #c1a68c;
                    --brown-500: #b08d6c;
                    --brown-600: #9a7b5f;
                    --brown-700: #846a51;
                    --brown-800: #6b5440;
                    --brown-900: #524030;
                  }
                  
                  .bg-brown {
                    background-color: var(--brown-600) !important;
                  }
                  
                  .bg-light-brown {
                    background-color: var(--brown-100) !important;
                  }
                  
                  .bg-gradient-brown {
                    background: linear-gradient(to right, var(--brown-700), var(--brown-500)) !important;
                  }
                  
                  .text-brown {
                    color: var(--brown-700) !important;
                  }
                  
                  .btn-brown {
                    background-color: var(--brown-600);
                    color: white;
                  }
                  
                  .btn-brown:hover {
                    background-color: var(--brown-700);
                    color: white;
                  }
                  
                  .btn-outline-brown {
                    border-color: var(--brown-600);
                    color: var(--brown-600);
                  }
                  
                  .btn-outline-brown:hover {
                    background-color: var(--brown-600);
                    color: white;
                  }
                  
                  .card {
                    margin-top: 10px;
                    border-radius: 10px;
                    overflow: hidden;
                    transition: all 0.3s ease;
                  }
                  
                  .card:hover {
                    box-shadow: 0 10px 20px rgba(0,0,0,0.1) !important;
                  }
                  
                  .card-header {
                    padding: 1rem 1.5rem;
                  }
                  
                  .upload-placeholder {
                    width: 100%;
                    height: 120px;
                    border: 2px dashed var(--brown-300);
                    border-radius: 8px;
                    cursor: pointer;
                  }
                  
                  .image-preview-item {
                    width: 100px;
                    height: 100px;
                    border-radius: 8px;
                    object-fit: cover;
                    margin-right: 10px;
                    margin-bottom: 10px;
                    border: 3px solid var(--brown-100);
                    transition: all 0.2s ease;
                  }
                  
                  .image-preview-item:hover {
                    transform: scale(1.05);
                    border-color: var(--brown-300);
                  }
                  
                  .image-preview-remove {
                    position: absolute;
                    top: -8px;
                    right: -8px;
                    background: var(--brown-600);
                    color: white;
                    border-radius: 50%;
                    width: 24px;
                    height: 24px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    cursor: pointer;
                    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
                    transition: all 0.2s ease;
                  }
                  
                  .image-preview-remove:hover {
                    background: #dc3545;
                    transform: scale(1.1);
                  }
                  
                  .alert-light-brown {
                    background-color: var(--brown-100);
                    border-color: var(--brown-200);
                    color: var(--brown-800);
                  }
                  
                  .cropper-container {
                    max-width: 100%;
                  }
                  
                  .img-container {
                    background-color: #f8f9fa;
                    width: 100%;
                    text-align: center;
                  }
                  
                  .cropper-view-box,
                  .cropper-face {
                    border-radius: 0;
                  }
                  
                  .cropper-line, .cropper-point {
                    background-color: var(--brown-600) !important;
                  }
                
                  /* Loading animation */
                  .loading-overlay {
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(255,255,255,0.8);
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    z-index: 9999;
                    flex-direction: column;
                  }
                
                  .spinner {
                    width: 40px;
                    height: 40px;
                    border: 4px solid rgba(0,0,0,0.1);
                    border-radius: 50%;
                    border-top-color: var(--brown-600);
                    animation: spin 1s ease-in-out infinite;
                  }
                
                  @keyframes spin {
                    to { transform: rotate(360deg); }
                  }
                
                  /* Form enhancements */
                  .form-control:focus, .form-select:focus {
                    border-color: var(--brown-400);
                    box-shadow: 0 0 0 0.25rem rgba(176, 141, 108, 0.25);
                  }
                
                  textarea {
                    resize: vertical;
                  }
                </style>
                
                
     

<!-- 
                 <script>
                  // Define allowed formats
                  const allowedFormats = ['jpg', 'jpeg', 'png', 'webp'];
                  
                  // Define variables for cropping
                  let cropper;
                  let currentFileIndex;
                  let selectedFiles = [];
                  let croppedImages = [];
                  let cropperModal;
                  
                  document.addEventListener('DOMContentLoaded', function() {
                    // Initialize modal
                    cropperModal = new bootstrap.Modal(document.getElementById('imageCropperModal'));
                  
                    // Set up click on upload placeholder
                    document.querySelector('.upload-placeholder').addEventListener('click', function() {
                      document.getElementById('productImages').click();
                    });
                  
                    // Image input change handler
                    document.getElementById('productImages').addEventListener('change', function(event) {
                      // Get the newly selected files
                      const newFiles = Array.from(this.files);
                  
                      // Validate file formats
                      const invalidFiles = newFiles.filter(file => {
                        const extension = file.name.split('.').pop().toLowerCase();
                        return !allowedFormats.includes(extension);
                      });
                  
                      if (invalidFiles.length > 0) {
                        Swal.fire({
                          icon: 'error',
                          title: 'Invalid File Format',
                          text: `Only ${allowedFormats.join(', ')} formats are allowed. Invalid files: ${invalidFiles.map(f => f.name).join(', ')}.`,
                          confirmButtonText: 'OK'
                        });
                        // Clear invalid files
                        this.value = ''; // Reset file input
                        return;
                      }
                  
                      // Add new files to the selected files array
                      selectedFiles = [...newFiles];
                  
                      // Check if we have enough images
                      if (selectedFiles.length < 3 && croppedImages.length < 3) {
                        const totalImages = selectedFiles.length + croppedImages.length;
                        const remaining = 3 - totalImages;
                        if (remaining > 0) {
                          Swal.fire({
                            icon: 'warning',
                            title: 'Insufficient Images',
                            text: `Please select ${remaining} more image${remaining > 1 ? 's' : ''}. Total images should be at least 3.`,
                            confirmButtonText: 'OK'
                          });
                        }
                      }
                  
                      // Start cropping process with the new files
                      currentFileIndex = 0;
                      startCropping();
                    });
                  
                    // Cancel button event
                    document.getElementById('cancelBtn').addEventListener('click', function() {
                      if (confirm('Are you sure you want to cancel image cropping? You will need to select images again.')) {
                        cropperModal.hide();
                        if (cropper) {
                          cropper.destroy();
                          cropper = null;
                        }
                        document.getElementById('productImages').value = '';
                        selectedFiles = [];
                  
                        // Only reset cropped images if there are no images processed yet
                        if (croppedImages.length === 0) {
                          resetPreviewArea();
                        } else {
                          displayCroppedImages(); // Redisplay existing cropped images
                        }
                      }
                    });
                  
                    // Close modal button
                    document.getElementById('closeModal').addEventListener('click', function() {
                      document.getElementById('cancelBtn').click(); // Trigger cancel button
                    });
                  
                    // Crop and continue button
                    document.getElementById('cropImageBtn').addEventListener('click', function() {
                      if (!cropper) return;
                  
                      const canvas = cropper.getCroppedCanvas({
                        width: 800,
                        height: 800,
                        imageSmoothingQuality: 'high'
                      });
                  
                      // Get the cropped image as a data URL
                      const croppedDataUrl = canvas.toDataURL('image/jpeg');
                  
                      // Save this cropped image
                      croppedImages.push({
                        dataUrl: croppedDataUrl,
                        filename: selectedFiles[currentFileIndex].name
                      });
                  
                      // Update progress bar
                      updateProgress();
                  
                      // Destroy current cropper instance
                      if (cropper) {
                        cropper.destroy();
                        cropper = null;
                      }
                  
                      // Move to next image
                      currentFileIndex++;
                  
                      // Check if we have more images to process
                      if (currentFileIndex < selectedFiles.length) {
                        // Process next image
                        processNextImage();
                      } else {
                        // All images processed, hide modal and display them
                        cropperModal.hide();
                        displayCroppedImages();
                      }
                    });
                  
                    // Form submission
                    document.getElementById('addProductForm').addEventListener('submit', function(e) {
                      e.preventDefault();
                  
                      // Validate category
                      const categorySelect = document.getElementById('productCategory');
                      const selectedCategory = categorySelect.value;
                      if (!selectedCategory || selectedCategory === '') {
                        Swal.fire({
                          icon: 'error',
                          title: 'Invalid Category',
                          text: 'Please select a valid book category.',
                          confirmButtonText: 'OK'
                        });
                        return;
                      }
                  
                      // Validate minimum 3 images
                      if (croppedImages.length < 3) {
                        Swal.fire({
                          icon: 'error',
                          title: 'Insufficient Images',
                          text: 'Please upload and crop at least 3 book images.',
                          confirmButtonText: 'OK'
                        });
                        return;
                      }
                  
                      // Show loading overlay
                      showLoading('Saving book...');
                  
                      // Convert cropped images to Blob files and append to FormData
                      const formData = new FormData(this);
                  
                      // Remove the original file input images
                      formData.delete('productImages');
                  
                      // Create promises for all blob conversions
                      const blobPromises = croppedImages.map((image, index) => {
                        return fetch(image.dataUrl)
                          .then(res => res.blob())
                          .then(blob => {
                            const filename = `book-image-${index+1}-${Date.now()}.jpg`;
                            return new File([blob], filename, { type: 'image/jpeg' });
                          });
                      });
                  
                      // When all blobs are ready, add them to formData and submit
                      Promise.all(blobPromises)
                        .then(files => {
                          files.forEach(file => {
                            formData.append('productImages', file);
                          });
                          return submitFormWithFormData(formData);
                        })
                        .catch(error => {
                          hideLoading();
                          console.error('Error:', error);
                          Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'There was an error processing your images. Please try again.',
                            confirmButtonText: 'OK'
                          });
                        });
                    });
                  
                    function startCropping() {
                      // Start the cropping process with the first image
                      if (selectedFiles.length > 0) {
                        processNextImage();
                      }
                    }
                  
                    function processNextImage() {
                      if (currentFileIndex >= selectedFiles.length) {
                        // All images processed, display them
                        displayCroppedImages();
                        return;
                      }
                  
                      const file = selectedFiles[currentFileIndex];
                  
                      // Validate file type
                      const extension = file.name.split('.').pop().toLowerCase();
                      if (!allowedFormats.includes(extension)) {
                        Swal.fire({
                          icon: 'error',
                          title: 'Invalid File Format',
                          text: `File "${file.name}" is not allowed. Only ${allowedFormats.join(', ')} formats are supported.`,
                          confirmButtonText: 'OK'
                        });
                        currentFileIndex++;
                        processNextImage();
                        return;
                      }
                  
                      if (!file.type.match('image.*')) {
                        currentFileIndex++;
                        processNextImage();
                        return;
                      }
                  
                      // Update the modal title to show progress
                      document.getElementById('currentImageNumber').textContent = 
                        ` (${currentFileIndex + 1} of ${selectedFiles.length})`;
                  
                      // Update progress bar
                      updateProgress();
                  
                      const reader = new FileReader();
                      reader.onload = function(e) {
                        // Set the image in the cropper
                        const cropperImage = document.getElementById('cropperImage');
                        cropperImage.src = e.target.result;
                  
                        // Show the modal
                        cropperModal.show();
                  
                        // Initialize cropper after modal is shown
                        setTimeout(() => {
                          // Initialize cropper
                          cropper = new Cropper(cropperImage, {
                            aspectRatio: 0, // Square aspect ratio for book images
                            viewMode: 2,    // Restrict the crop box to not exceed the size of the canvas
                            highlight: false,
                            cropBoxMovable: true,
                            cropBoxResizable: true,
                            toggleDragModeOnDblclick: false
                          });
                        }, 300);
                      };
                  
                      reader.readAsDataURL(file);
                    }
                  
                    function updateProgress() {
                      const progressBar = document.getElementById('cropProgress');
                      const percentage = ((currentFileIndex) / selectedFiles.length) * 100;
                      progressBar.style.width = percentage + '%';
                      progressBar.setAttribute('aria-valuenow', percentage);
                    }
                  
                    function displayCroppedImages() {
                      const previewArea = document.getElementById('imagePreviewArea');
                      previewArea.innerHTML = ''; // Clear existing previews
                  
                      croppedImages.forEach((image, index) => {
                        const previewItem = document.createElement('div');
                        previewItem.className = 'position-relative me-2 mb-2';
                        previewItem.innerHTML = `
                          <img src="${image.dataUrl}" class="image-preview-item shadow" data-index="${index}" title="Book image ${index + 1}">
                          <div class="image-preview-remove" onclick="removePreview(${index})">
                            <i class="fas fa-times fa-xs"></i>
                          </div>
                        `;
                        previewArea.appendChild(previewItem);
                      });
                  
                      // Add upload more button if needed
                      const uploadMoreBtn = document.createElement('div');
                      uploadMoreBtn.className = 'image-preview-item d-flex align-items-center justify-content-center bg-light-brown me-2 mb-2';
                      uploadMoreBtn.style.cursor = 'pointer';
                      uploadMoreBtn.innerHTML = '<i class="fas fa-plus text-brown"></i>';
                      uploadMoreBtn.addEventListener('click', function() {
                        document.getElementById('productImages').click();
                      });
                      previewArea.appendChild(uploadMoreBtn);
                    }
                  
                    function resetPreviewArea() {
                      const previewArea = document.getElementById('imagePreviewArea');
                      previewArea.innerHTML = `
                        <div class="upload-placeholder d-flex align-items-center justify-content-center bg-light-brown rounded p-3 mb-2">
                          <div class="text-center">
                            <i class="fas fa-cloud-upload-alt fa-2x text-brown mb-2"></i>
                            <p class="mb-0 small">Click to select at least 3 images</p>
                          </div>
                        </div>
                      `;
                    }
                  
                    function removePreview(index) {
                      croppedImages.splice(index, 1);
                      displayCroppedImages();
                  
                      // If no images left, show the upload placeholder
                      if (croppedImages.length === 0) {
                        resetPreviewArea();
                      }
                    }
                  
                    function submitFormWithFormData(formData) {
                      const actionUrl = document.getElementById('addProductForm').action;
                      return fetch(actionUrl, {
                        method: 'POST',
                        body: formData
                      })
                      .then(response => {
                        hideLoading();
                        if (response.ok) {
                          Swal.fire({
                            title: 'Success',
                            icon: 'success',
                            text: 'New Product added'
                          });
                          setTimeout(() => {
                            window.location.reload();
                          }, 2000);
                        } else {
                          Swal.fire({
                            title: 'Failed',
                            icon: 'error',
                            text: response.message || 'some inputs not in correct form Please try again'
                          });
                          throw new Error(response.message||"some input not in correct form Please try again");
                        }
                      })
                      .catch(error => {
                        hideLoading();
                        console.error('Error:', error);
                        Swal.fire({
                          title: 'Failed',
                          icon: 'error',
                          text: error.message||'All fields are required'
                        });
                      });
                    }
                  
                    function showLoading(message) {
                      // Create loading overlay
                      const overlay = document.createElement('div');
                      overlay.className = 'loading-overlay';
                      overlay.innerHTML = `
                        <div class="spinner mb-3"></div>
                        <p class="text-brown">${message || 'Processing...'}</p>
                      `;
                      document.body.appendChild(overlay);
                    }
                  
                    function hideLoading() {
                      const overlay = document.querySelector('.loading-overlay');
                      if (overlay) {
                        overlay.remove();
                      }
                    }
                  
                    // Make removePreview globally accessible for the onclick handler
                    window.removePreview = removePreview;
                  });
                  </script> -->



                  <script>
                    // Define allowed formats
const allowedFormats = ['jpg', 'jpeg', 'png', 'webp'];

// Define variables for cropping
let cropper;
let currentFileIndex;
let selectedFiles = [];
let croppedImages = [];
let cropperModal;

document.addEventListener('DOMContentLoaded', function() {
  // Initialize modal
  cropperModal = new bootstrap.Modal(document.getElementById('imageCropperModal'));

  // Set up click on upload placeholder
  document.querySelector('.upload-placeholder').addEventListener('click', function() {
    document.getElementById('productImages').click();
  });

  // Image input change handler
  document.getElementById('productImages').addEventListener('change', function(event) {
    // Get the newly selected files
    const newFiles = Array.from(this.files);

    // Validate file formats
    const invalidFiles = newFiles.filter(file => {
      const extension = file.name.split('.').pop().toLowerCase();
      return !allowedFormats.includes(extension);
    });

    if (invalidFiles.length > 0) {
      Swal.fire({
        icon: 'error',
        title: 'Invalid File Format',
        text: `Only ${allowedFormats.join(', ')} formats are allowed. Invalid files: ${invalidFiles.map(f => f.name).join(', ')}.`,
        confirmButtonText: 'OK'
      });
      // Clear invalid files
      this.value = ''; // Reset file input
      return;
    }

    // Add new files to the selected files array
    selectedFiles = [...newFiles];

    // Check if we have enough images
    if (selectedFiles.length < 3 && croppedImages.length < 3) {
      const totalImages = selectedFiles.length + croppedImages.length;
      const remaining = 3 - totalImages;
      if (remaining > 0) {
        Swal.fire({
          icon: 'warning',
          title: 'Insufficient Images',
          text: `Please select ${remaining} more image${remaining > 1 ? 's' : ''}. Total images should be at least 3.`,
          confirmButtonText: 'OK'
        });
      }
    }

    // Start cropping process with the new files
    currentFileIndex = 0;
    startCropping();
  });

  // Cancel button event
  document.getElementById('cancelBtn').addEventListener('click', function() {
    if (confirm('Are you sure you want to cancel image cropping? You will need to select images again.')) {
      cropperModal.hide();
      if (cropper) {
        cropper.destroy();
        cropper = null;
      }
      document.getElementById('productImages').value = '';
      selectedFiles = [];

      // Only reset cropped images if there are no images processed yet
      if (croppedImages.length === 0) {
        resetPreviewArea();
      } else {
        displayCroppedImages(); // Redisplay existing cropped images
      }
    }
  });

  // Close modal button
  document.getElementById('closeModal').addEventListener('click', function() {
    document.getElementById('cancelBtn').click(); // Trigger cancel button
  });

  // Crop and continue button
  document.getElementById('cropImageBtn').addEventListener('click', function() {
    if (!cropper) return;

    const canvas = cropper.getCroppedCanvas({
      width: 800,
      height: 800,
      imageSmoothingQuality: 'high'
    });

    // Get the cropped image as a data URL
    const croppedDataUrl = canvas.toDataURL('image/jpeg');

    // Save this cropped image
    croppedImages.push({
      dataUrl: croppedDataUrl,
      filename: selectedFiles[currentFileIndex].name
    });

    // Update progress bar
    updateProgress();

    // Destroy current cropper instance
    if (cropper) {
      cropper.destroy();
      cropper = null;
    }

    // Move to next image
    currentFileIndex++;

    // Check if we have more images to process
    if (currentFileIndex < selectedFiles.length) {
      // Process next image
      processNextImage();
    } else {
      // All images processed, hide modal and display them
      cropperModal.hide();
      displayCroppedImages();
    }
  });

  // ============ FORM VALIDATION SECTION ============ //

  // Get form elements
  const form = document.getElementById('addProductForm');
  const productName = document.getElementById('productName');
  const writer = document.getElementById('writer');
  const productCategory = document.getElementById('productCategory');
  const language = document.getElementById('language');
  const regularPrice = document.getElementById('regularPrice');
  const salePrice = document.getElementById('salePrice');
  const availableQuantity = document.getElementById('availableQuantity');
  const productDescription = document.getElementById('productDescription');
  const publishedDate = document.getElementById('publishedDate');

  // Validation patterns
  const patterns = {
    name: /^[a-zA-Z0-9\s\-:.,!?'"()&]+$/,
    writer: /^[a-zA-Z\s\-.']+$/,
    description: /^[\w\s\-.,!?'"():;&@#$%^*+={}[\]|\\/<>~`]+$/
  };

  // Error messages
  const errorMessages = {
    productName: {
      required: 'Book title is required',
      minLength: 'Title must be at least 2 characters long',
      maxLength: 'Title cannot exceed 100 characters',
      pattern: 'Title contains invalid characters'
    },
    writer: {
      required: 'Writer name is required',
      minLength: 'Writer name must be at least 2 characters long',
      maxLength: 'Writer name cannot exceed 50 characters',
      pattern: 'Writer name can only contain letters, spaces, hyphens, periods, and apostrophes'
    },
    productCategory: {
      required: 'Please select a book category'
    },
    language: {
      required: 'Please select a language'
    },
    // regularPrice: {
    //   required: 'Regular price is required',
    //   min: 'Price must be greater than 0',
    //   max: 'Price cannot exceed ₹100,000'
    // },
    // salePrice: {
    //   min: 'Offer price cannot be negative',
    //   max: 'Offer price cannot exceed ₹100,000',
    //   greater: 'Offer price must be less than regular price'
    // },
     regularPrice: {
      required: 'Regular price is required',
      min: 'Regular price must be at least ₹199',
      max: 'Regular price cannot exceed ₹999'
    },
    salePrice: {
      min: 'Sale price must be at least ₹199',
      max: 'Sale price cannot exceed ₹999',
      greater: 'Sale price must be less than regular price'
    },

    availableQuantity: {
      required: 'Available quantity is required',
      min: 'Quantity cannot be negative',
      max: 'Quantity cannot exceed 10,000'
    },
    productDescription: {
      required: 'Product description is required',
      minLength: 'Description must be at least 20 characters long',
      maxLength: 'Description cannot exceed 2000 characters'
    },
    publishedDate: {
      future: 'Publication date cannot be in the future'
    }
  };

  // Add custom styles for validation
  const style = document.createElement('style');
  style.textContent = `
    .is-invalid {
      border-color: #dc3545 !important;
      box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25) !important;
    }
    .is-valid {
      border-color: #198754 !important;
      box-shadow: 0 0 0 0.25rem rgba(25, 135, 84, 0.25) !important;
    }
    .invalid-feedback {
      display: block;
      width: 100%;
      margin-top: 0.25rem;
      font-size: 0.875em;
      color: #dc3545;
    }
    .valid-feedback {
      display: block;
      width: 100%;
      margin-top: 0.25rem;
      font-size: 0.875em;
      color: #198754;
    }
  `;
  document.head.appendChild(style);

  // Utility functions
  function showError(element, message) {
    element.classList.remove('is-valid');
    element.classList.add('is-invalid');
    
    // Remove existing feedback
    const existingFeedback = element.parentNode.querySelector('.invalid-feedback, .valid-feedback');
    if (existingFeedback) {
      existingFeedback.remove();
    }
    
    // Add error message
    const feedback = document.createElement('div');
    feedback.className = 'invalid-feedback';
    feedback.textContent = message;
    element.parentNode.appendChild(feedback);
  }

  function showSuccess(element) {
    element.classList.remove('is-invalid');
    element.classList.add('is-valid');
    
    // Remove existing feedback
    const existingFeedback = element.parentNode.querySelector('.invalid-feedback, .valid-feedback');
    if (existingFeedback) {
      existingFeedback.remove();
    }
  }

  function clearValidation(element) {
    element.classList.remove('is-invalid', 'is-valid');
    const existingFeedback = element.parentNode.querySelector('.invalid-feedback, .valid-feedback');
    if (existingFeedback) {
      existingFeedback.remove();
    }
  }

  // Validation functions
  function validateProductName() {
    const value = productName.value.trim();
    
    if (!value) {
      showError(productName, errorMessages.productName.required);
      return false;
    }
    
    if (value.length < 2) {
      showError(productName, errorMessages.productName.minLength);
      return false;
    }
    
    if (value.length > 100) {
      showError(productName, errorMessages.productName.maxLength);
      return false;
    }
    
    if (!patterns.name.test(value)) {
      showError(productName, errorMessages.productName.pattern);
      return false;
    }
    
    showSuccess(productName);
    return true;
  }

  function validateWriter() {
    const value = writer.value.trim();
    
    if (!value) {
      showError(writer, errorMessages.writer.required);
      return false;
    }
    
    if (value.length < 2) {
      showError(writer, errorMessages.writer.minLength);
      return false;
    }
    
    if (value.length > 50) {
      showError(writer, errorMessages.writer.maxLength);
      return false;
    }
    
    if (!patterns.writer.test(value)) {
      showError(writer, errorMessages.writer.pattern);
      return false;
    }
    
    showSuccess(writer);
    return true;
  }

  function validateCategory() {
    const value = productCategory.value;
    
    if (!value || value === '') {
      showError(productCategory, errorMessages.productCategory.required);
      return false;
    }
    
    showSuccess(productCategory);
    return true;
  }

  function validateLanguage() {
    const value = language.value;
    
    if (!value || value === '') {
      showError(language, errorMessages.language.required);
      return false;
    }
    
    showSuccess(language);
    return true;
  }

//   function validateRegularPrice() {
//     const value = parseFloat(regularPrice.value);
    
//     if (!regularPrice.value || isNaN(value)) {
//       showError(regularPrice, errorMessages.regularPrice.required);
//       return false;
//     }
    
//     if (value <= 0) {
//       showError(regularPrice, errorMessages.regularPrice.min);
//       return false;
//     }
    
//     if (value > 100000) {
//       showError(regularPrice, errorMessages.regularPrice.max);
//       return false;
//     }
    
//     showSuccess(regularPrice);
//     return true;
//   }


// function validateSalePrice() {
//     const saleValue = parseFloat(salePrice.value);
//     const regularValue = parseFloat(regularPrice.value);
    
//     // Sale price is optional, so if empty, it's valid
//     if (!salePrice.value) {
//       clearValidation(salePrice);
//       return true;
//     }
    
//     if (isNaN(saleValue)) {
//       showError(salePrice, 'Please enter a valid price');
//       return false;
//     }
    
//     if (saleValue < 199) {
//       showError(salePrice, 'Sale price must be at least ₹199');
//       return false;
//     }
    
//     if (saleValue > 999) {
//       showError(salePrice, 'Sale price cannot exceed ₹999');
//       return false;
//     }
    
//     if (!isNaN(regularValue) && saleValue >= regularValue) {
//       showError(salePrice, 'Sale price must be less than regular price');
//       return false;
//     }
    
//     showSuccess(salePrice);
//     return true;
// }




function validateRegularPrice() {
    const value = parseFloat(regularPrice.value);
    
    if (!regularPrice.value || isNaN(value)) {
      showError(regularPrice, 'Regular price is required');
      return false;
    }
    
    if (value < 199) {
      showError(regularPrice, 'Regular price must be at least ₹199');
      return false;
    }
    
    if (value > 999) {
      showError(regularPrice, 'Regular price cannot exceed ₹999');
      return false;
    }
    
    showSuccess(regularPrice);
    return true;
}

function validateSalePrice() {
    const saleValue = parseFloat(salePrice.value);
    const regularValue = parseFloat(regularPrice.value);
    
    // Sale price is optional, so if empty, it's valid
    if (!salePrice.value) {
      clearValidation(salePrice);
      return true;
    }
    
    if (isNaN(saleValue)) {
      showError(salePrice, 'Please enter a valid price');
      return false;
    }
    
    if (saleValue < 199) {
      showError(salePrice, 'Sale price must be at least ₹199');
      return false;
    }
    
    if (saleValue > 999) {
      showError(salePrice, 'Sale price cannot exceed ₹999');
      return false;
    }
    
    if (!isNaN(regularValue) && saleValue >= regularValue) {
      showError(salePrice, 'Sale price must be less than regular price');
      return false;
    }
    
    showSuccess(salePrice);
    return true;
}



  function validateQuantity() {
    const value = parseInt(availableQuantity.value);
    
    if (!availableQuantity.value || isNaN(value)) {
      showError(availableQuantity, errorMessages.availableQuantity.required);
      return false;
    }
    
    if (value < 0) {
      showError(availableQuantity, errorMessages.availableQuantity.min);
      return false;
    }
    
    if (value > 10000) {
      showError(availableQuantity, errorMessages.availableQuantity.max);
      return false;
    }
    
    showSuccess(availableQuantity);
    return true;
  }

  function validateDescription() {
    const value = productDescription.value.trim();
    
    if (!value) {
      showError(productDescription, errorMessages.productDescription.required);
      return false;
    }
    
    if (value.length < 20) {
      showError(productDescription, errorMessages.productDescription.minLength);
      return false;
    }
    
    if (value.length > 2000) {
      showError(productDescription, errorMessages.productDescription.maxLength);
      return false;
    }
    
    showSuccess(productDescription);
    return true;
  }

  function validatePublishedDate() {
    const value = publishedDate.value;
    
    // Published date is optional
    if (!value) {
      clearValidation(publishedDate);
      return true;
    }
    
    const selectedDate = new Date(value);
    const currentDate = new Date();
    currentDate.setHours(23, 59, 59, 999); // Set to end of current day
    
    if (selectedDate > currentDate) {
      showError(publishedDate, errorMessages.publishedDate.future);
      return false;
    }
    
    showSuccess(publishedDate);
    return true;
  }

  // Real-time validation event listeners
  productName.addEventListener('blur', validateProductName);
  productName.addEventListener('input', function() {
    if (this.classList.contains('is-invalid')) {
      validateProductName();
    }
  });

  writer.addEventListener('blur', validateWriter);
  writer.addEventListener('input', function() {
    if (this.classList.contains('is-invalid')) {
      validateWriter();
    }
  });

  productCategory.addEventListener('change', validateCategory);
  language.addEventListener('change', validateLanguage);

  regularPrice.addEventListener('blur', function() {
    validateRegularPrice();
    // Also validate sale price when regular price changes
    if (salePrice.value) {
      validateSalePrice();
    }
  });
  regularPrice.addEventListener('input', function() {
    if (this.classList.contains('is-invalid')) {
      validateRegularPrice();
    }
  });

  salePrice.addEventListener('blur', validateSalePrice);
  salePrice.addEventListener('input', function() {
    if (this.classList.contains('is-invalid') || this.value) {
      validateSalePrice();
    }
  });

  availableQuantity.addEventListener('blur', validateQuantity);
  availableQuantity.addEventListener('input', function() {
    if (this.classList.contains('is-invalid')) {
      validateQuantity();
    }
  });

  productDescription.addEventListener('blur', validateDescription);
  productDescription.addEventListener('input', function() {
    if (this.classList.contains('is-invalid')) {
      validateDescription();
    }
  });

  publishedDate.addEventListener('change', validatePublishedDate);

  // Prevent negative values in number inputs
  [regularPrice, salePrice, availableQuantity].forEach(input => {
    input.addEventListener('keydown', function(e) {
      // Prevent minus key
      if (e.key === '-' || e.key === 'e' || e.key === 'E') {
        e.preventDefault();
      }
    });
    
    input.addEventListener('paste', function(e) {
      e.preventDefault();
      const paste = (e.clipboardData || window.clipboardData).getData('text');
      const numericValue = parseFloat(paste);
      if (!isNaN(numericValue) && numericValue >= 0) {
        this.value = numericValue;
        this.dispatchEvent(new Event('input'));
      }
    });
  });

  // Character counters for text fields
  function addCharacterCounter(element, maxLength) {
    const counter = document.createElement('div');
    counter.className = 'character-counter text-muted small mt-1';
    counter.style.textAlign = 'right';
    element.parentNode.appendChild(counter);
    
    function updateCounter() {
      const current = element.value.length;
      counter.textContent = `${current}/${maxLength} characters`;
      
      if (current > maxLength * 0.9) {
        counter.style.color = '#dc3545';
      } else if (current > maxLength * 0.7) {
        counter.style.color = '#ffc107';
      } else {
        counter.style.color = '#6c757d';
      }
    }
    
    element.addEventListener('input', updateCounter);
    updateCounter();
  }

  // Add character counters
  addCharacterCounter(productName, 100);
  addCharacterCounter(writer, 50);
  addCharacterCounter(productDescription, 2000);

  // Form submission validation
  function validateForm() {
    const validations = [
      validateProductName(),
      validateWriter(),
      validateCategory(),
      validateLanguage(),
      validateRegularPrice(),
      validateSalePrice(),
      validateQuantity(),
      validateDescription(),
      validatePublishedDate()
    ];

    const isValid = validations.every(validation => validation === true);
    
    if (!isValid) {
      // Focus on first invalid field
      const firstInvalidField = form.querySelector('.is-invalid');
      if (firstInvalidField) {
        firstInvalidField.focus();
        firstInvalidField.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
      
      Swal.fire({
        icon: 'error',
        title: 'Validation Error',
        text: 'Please fix all errors before submitting the form.',
        confirmButtonText: 'OK'
      });
    }
    
    return isValid;
  }

  // Override the existing form submission event
  form.addEventListener('submit', function(e) {
    e.preventDefault();
    
    // Run form validation
    if (!validateForm()) {
      return false;
    }
    
    // Validate minimum 3 images
    if (croppedImages.length < 3) {
      Swal.fire({
        icon: 'error',
        title: 'Insufficient Images',
        text: 'Please upload and crop at least 3 book images.',
        confirmButtonText: 'OK'
      });
      return;
    }

    // Show loading overlay
    showLoading('Saving book...');

    // Convert cropped images to Blob files and append to FormData
    const formData = new FormData(this);

    // Remove the original file input images
    formData.delete('productImages');

    // Create promises for all blob conversions
    const blobPromises = croppedImages.map((image, index) => {
      return fetch(image.dataUrl)
        .then(res => res.blob())
        .then(blob => {
          const filename = `book-image-${index+1}-${Date.now()}.jpg`;
          return new File([blob], filename, { type: 'image/jpeg' });
        });
    });

    // When all blobs are ready, add them to formData and submit
    Promise.all(blobPromises)
      .then(files => {
        files.forEach(file => {
          formData.append('productImages', file);
        });
        return submitFormWithFormData(formData);
      })
      .catch(error => {
        hideLoading();
        console.error('Error:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'There was an error processing your images. Please try again.',
          confirmButtonText: 'OK'
        });
      });
  }, true); // Use capture phase to ensure this runs before existing handlers

  // ============ IMAGE PROCESSING FUNCTIONS ============ //

  function startCropping() {
    // Start the cropping process with the first image
    if (selectedFiles.length > 0) {
      processNextImage();
    }
  }

  function processNextImage() {
    if (currentFileIndex >= selectedFiles.length) {
      // All images processed, display them
      displayCroppedImages();
      return;
    }

    const file = selectedFiles[currentFileIndex];

    // Validate file type
    const extension = file.name.split('.').pop().toLowerCase();
    if (!allowedFormats.includes(extension)) {
      Swal.fire({
        icon: 'error',
        title: 'Invalid File Format',
        text: `File "${file.name}" is not allowed. Only ${allowedFormats.join(', ')} formats are supported.`,
        confirmButtonText: 'OK'
      });
      currentFileIndex++;
      processNextImage();
      return;
    }

    if (!file.type.match('image.*')) {
      currentFileIndex++;
      processNextImage();
      return;
    }

    // Update the modal title to show progress
    document.getElementById('currentImageNumber').textContent = 
      ` (${currentFileIndex + 1} of ${selectedFiles.length})`;

    // Update progress bar
    updateProgress();

    const reader = new FileReader();
    reader.onload = function(e) {
      // Set the image in the cropper
      const cropperImage = document.getElementById('cropperImage');
      cropperImage.src = e.target.result;

      // Show the modal
      cropperModal.show();

      // Initialize cropper after modal is shown
      setTimeout(() => {
        // Initialize cropper
        cropper = new Cropper(cropperImage, {
          aspectRatio: 0, // Square aspect ratio for book images
          viewMode: 2,    // Restrict the crop box to not exceed the size of the canvas
          highlight: false,
          cropBoxMovable: true,
          cropBoxResizable: true,
          toggleDragModeOnDblclick: false
        });
      }, 300);
    };

    reader.readAsDataURL(file);
  }

  function updateProgress() {
    const progressBar = document.getElementById('cropProgress');
    const percentage = ((currentFileIndex) / selectedFiles.length) * 100;
    progressBar.style.width = percentage + '%';
    progressBar.setAttribute('aria-valuenow', percentage);
  }

  function displayCroppedImages() {
    const previewArea = document.getElementById('imagePreviewArea');
    previewArea.innerHTML = ''; // Clear existing previews

    croppedImages.forEach((image, index) => {
      const previewItem = document.createElement('div');
      previewItem.className = 'position-relative me-2 mb-2';
      previewItem.innerHTML = `
        <img src="${image.dataUrl}" class="image-preview-item shadow" data-index="${index}" title="Book image ${index + 1}">
        <div class="image-preview-remove" onclick="removePreview(${index})">
          <i class="fas fa-times fa-xs"></i>
        </div>
      `;
      previewArea.appendChild(previewItem);
    });

    // Add upload more button if needed
    const uploadMoreBtn = document.createElement('div');
    uploadMoreBtn.className = 'image-preview-item d-flex align-items-center justify-content-center bg-light-brown me-2 mb-2';
    uploadMoreBtn.style.cursor = 'pointer';
    uploadMoreBtn.innerHTML = '<i class="fas fa-plus text-brown"></i>';
    uploadMoreBtn.addEventListener('click', function() {
      document.getElementById('productImages').click();
    });
    previewArea.appendChild(uploadMoreBtn);
  }

  function resetPreviewArea() {
    const previewArea = document.getElementById('imagePreviewArea');
    previewArea.innerHTML = `
      <div class="upload-placeholder d-flex align-items-center justify-content-center bg-light-brown rounded p-3 mb-2">
        <div class="text-center">
          <i class="fas fa-cloud-upload-alt fa-2x text-brown mb-2"></i>
          <p class="mb-0 small">Click to select at least 3 images</p>
        </div>
      </div>
    `;
  }

  function removePreview(index) {
    croppedImages.splice(index, 1);
    displayCroppedImages();

    // If no images left, show the upload placeholder
    if (croppedImages.length === 0) {
      resetPreviewArea();
    }
  }

  function submitFormWithFormData(formData) {
    const actionUrl = document.getElementById('addProductForm').action;
    return fetch(actionUrl, {
      method: 'POST',
      body: formData
    })
    .then(response => {
      hideLoading();
      if (response.ok) {
        Swal.fire({
          title: 'Success',
          icon: 'success',
          text: 'New Product added'
        });
        setTimeout(() => {
          window.location.reload();
        }, 2000);
      } else {
        Swal.fire({
          title: 'Failed',
          icon: 'error',
          text: response.message || 'some inputs not in correct form Please try again'
        });
        throw new Error(response.message||"some input not in correct form Please try again");
      }
    })
    .catch(error => {
      hideLoading();
      console.error('Error:', error);
      Swal.fire({
        title: 'Failed',
        icon: 'error',
        text: error.message||'All fields are required'
      });
    });
  }

  function showLoading(message) {
    // Create loading overlay
    const overlay = document.createElement('div');
    overlay.className = 'loading-overlay';
    overlay.innerHTML = `
      <div class="spinner mb-3"></div>
      <p class="text-brown">${message || 'Processing...'}</p>
    `;
    document.body.appendChild(overlay);
  }

  function hideLoading() {
    const overlay = document.querySelector('.loading-overlay');
    if (overlay) {
      overlay.remove();
    }
  }

  // Make removePreview globally accessible for the onclick handler
  window.removePreview = removePreview;

  console.log('Book form validation and image upload initialized successfully');
});
                  </script>
                    <%- include('partials/admin/footer.ejs') %>
            </main>
            <%- include('partials/admin/scriptTags.ejs') %>
    </body>

</html>